/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.InlineResponse403;
import io.swagger.client.model.InlineResponse404;
import io.swagger.client.model.InlineResponse500;
import java.util.UUID;
import io.swagger.client.model.VillagerShopsShop;
import io.swagger.client.model.VillagerShopsStockItem;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VShopsApi
 */
@Ignore
public class VShopsApiTest {

    private final VShopsApi api = new VShopsApi();

    
    /**
     * Add Shop Item
     *
     * Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addShopItemTest() throws ApiException {
        UUID id = null;
        VillagerShopsStockItem body = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        VillagerShopsStockItem response = api.addShopItem(id, body, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Create Shops
     *
     * Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShopTest() throws ApiException {
        VillagerShopsShop body = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        VillagerShopsShop response = api.createShop(body, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Delete a Shop
     *
     * Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShopTest() throws ApiException {
        UUID id = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        VillagerShopsShop response = api.deleteShop(id, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Removes a Shop Item
     *
     * Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShopItemTest() throws ApiException {
        UUID id = null;
        Integer item = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        VillagerShopsShop response = api.deleteShopItem(id, item, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Get a Shop
     *
     * Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShopTest() throws ApiException {
        UUID id = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        VillagerShopsShop response = api.getShop(id, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Get a Shop
     *
     * Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShopItemTest() throws ApiException {
        UUID id = null;
        Integer item = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        VillagerShopsStockItem response = api.getShopItem(id, item, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * List Shop Items
     *
     * Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listShopItemsTest() throws ApiException {
        UUID id = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        List<VillagerShopsStockItem> response = api.listShopItems(id, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * List Shops
     *
     * Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listShopsTest() throws ApiException {
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        List<VillagerShopsShop> response = api.listShops(details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Change Shop
     *
     * Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShopTest() throws ApiException {
        UUID id = null;
        VillagerShopsShop body = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        VillagerShopsShop response = api.updateShop(id, body, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Change Shop Item
     *
     * Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShopItemTest() throws ApiException {
        UUID id = null;
        Integer item = null;
        VillagerShopsStockItem body = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        VillagerShopsStockItem response = api.updateShopItem(id, item, body, details, accept, pretty);

        // TODO: test validations
    }
    
}
