/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.InlineResponse403;
import io.swagger.client.model.InlineResponse404;
import io.swagger.client.model.InlineResponse500;
import io.swagger.client.model.InlineResponse501;
import io.swagger.client.model.NucleusKit;
import io.swagger.client.model.NucleusMailMessage;
import io.swagger.client.model.NucleusNamedLocation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NucleusApi
 */
@Ignore
public class NucleusApiTest {

    private final NucleusApi api = new NucleusApi();

    
    /**
     * Create a jail
     *
     * Creates a new jail.     **Required permissions:**    - **nucleus.jail.create**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createJailTest() throws ApiException {
        NucleusNamedLocation body = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        NucleusNamedLocation response = api.createJail(body, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Create a kit
     *
     * Creates a new kit.     **Required permissions:**    - **nucleus.kit.create**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createKitTest() throws ApiException {
        NucleusKit body = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        NucleusKit response = api.createKit(body, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Delete a jail
     *
     * Delete an existing jail.     **Required permissions:**    - **nucleus.jail.delete**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJailTest() throws ApiException {
        String name = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        NucleusNamedLocation response = api.deleteJail(name, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Delete a kit
     *
     * Delete an existing kit.     **Required permissions:**    - **nucleus.kit.delete**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteKitTest() throws ApiException {
        String name = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        NucleusKit response = api.deleteKit(name, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Get a jail
     *
     * Get detailed information about a jail.     **Required permissions:**    - **nucleus.jail.one**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJailTest() throws ApiException {
        String name = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        NucleusNamedLocation response = api.getJail(name, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Get a kit
     *
     * Get detailed information about a kit.     **Required permissions:**    - **nucleus.kit.one**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKitTest() throws ApiException {
        String name = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        NucleusKit response = api.getKit(name, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * List homes
     *
     * Get a list of all the homes of a player.     **Required permissions:**    - **nucleus.home.list**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHomesTest() throws ApiException {
        String player = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        List<NucleusNamedLocation> response = api.listHomes(player, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * List jails
     *
     * Get a list of all the jails on the server.     **Required permissions:**    - **nucleus.jail.list**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listJailsTest() throws ApiException {
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        List<NucleusNamedLocation> response = api.listJails(details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * List kits
     *
     * Get a list of all the kits on the server.     **Required permissions:**    - **nucleus.kit.list**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listKitsTest() throws ApiException {
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        List<NucleusKit> response = api.listKits(details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * List mail
     *
     * Get a list of all mail messages of a player.     **Required permissions:**    - **nucleus.mail.list**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMailTest() throws ApiException {
        String player = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        List<NucleusMailMessage> response = api.listMail(player, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * List modules
     *
     * Get a list of loaded Nucleus modules.     **Required permissions:**    - **nucleus.module.list**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMail_0Test() throws ApiException {
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        List<String> response = api.listMail_0(details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Modify a jail
     *
     * Modify an existing jail.     **Required permissions:**    - **nucleus.jail.modify**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyJailTest() throws ApiException {
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        NucleusNamedLocation response = api.modifyJail(details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Modify a kit
     *
     * Modify an existing kit.     **Required permissions:**    - **nucleus.kit.modify**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyKitTest() throws ApiException {
        String name = null;
        NucleusKit body = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        NucleusKit response = api.modifyKit(name, body, details, accept, pretty);

        // TODO: test validations
    }
    
}
