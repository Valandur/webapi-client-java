/*
 * WebAPI
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BlockOperationNew;
import io.swagger.client.model.BlockOperationResponse;
import io.swagger.client.model.BlockOperationsList;
import io.swagger.client.model.Data;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.SingleBlock;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BlockApi
 */
@Ignore
public class BlockApiTest {

    private final BlockApi api = new BlockApi();

    
    /**
     * Cancel block operation
     *
     * Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**  &gt; Required permission: block.op.delete 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelBlockOperationTest() throws ApiException {
        String uuid = null;
        BlockOperationResponse response = api.cancelBlockOperation(uuid);

        // TODO: test validations
    }
    
    /**
     * Modify block operation
     *
     * Modify an existing block operation to either pause or continue it.  &gt; Required permission: block.op.change 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeBlockOperationTest() throws ApiException {
        String uuid = null;
        Data data = null;
        BlockOperationResponse response = api.changeBlockOperation(uuid, data);

        // TODO: test validations
    }
    
    /**
     * Get one block
     *
     * Gets information about one block in the world.  &gt; Required permission: block.one 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockTest() throws ApiException {
        String world = null;
        Integer x = null;
        Integer y = null;
        Integer z = null;
        SingleBlock response = api.getBlock(world, x, y, z);

        // TODO: test validations
    }
    
    /**
     * Block operation details
     *
     * Gets details about a specific block operation  &gt; Required permission: block.op.one 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockOperationTest() throws ApiException {
        String uuid = null;
        BlockOperationResponse response = api.getBlockOperation(uuid);

        // TODO: test validations
    }
    
    /**
     * List block operations
     *
     * Returns a list of all the currently running block operations.  &gt; Required permission: block.op.list 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockOperationsTest() throws ApiException {
        BlockOperationsList response = api.getBlockOperations();

        // TODO: test validations
    }
    
    /**
     * Create block operation
     *
     * Start a request to get or change blocks on the server.  &gt; Required permission: block.op.create 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startBlockOperationTest() throws ApiException {
        List<BlockOperationNew> request = null;
        BlockOperationResponse response = api.startBlockOperation(request);

        // TODO: test validations
    }
    
}
