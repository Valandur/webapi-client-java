/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.InlineResponse403;
import io.swagger.client.model.InlineResponse404;
import io.swagger.client.model.InlineResponse500;
import io.swagger.client.model.PluginContainer;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PluginApi
 */
@Ignore
public class PluginApiTest {

    private final PluginApi api = new PluginApi();

    
    /**
     * Change plugin configs
     *
     * Allows changing the config files of plugin. Send a map from config filename to file contents. **This does not reload the plugin**, you can do that with &#x60;sponge plugins reload&#x60;, but not all plugins implement the reload event.     **Required permissions:**    - **plugin.config.modify**   - **plugin.config.modify.[plugin]**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePluginConfigTest() throws ApiException {
        String plugin = null;
        Object body = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        Map<String, Object> response = api.changePluginConfig(plugin, body, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Get a plugin
     *
     * Gets detailed information about a plugin.     **Required permissions:**    - **plugin.one**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPluginTest() throws ApiException {
        String plugin = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        PluginContainer response = api.getPlugin(plugin, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Get plugin configs
     *
     * Gets a map containing the plugin config file names as keys, and their config file contents as their values.     **Required permissions:**    - **plugin.config.get**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPluginConfigTest() throws ApiException {
        String plugin = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        Map<String, Object> response = api.getPluginConfig(plugin, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * List plugins
     *
     * Get a list of all the plugins running on the server.     **Required permissions:**    - **plugin.list**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPluginsTest() throws ApiException {
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        List<PluginContainer> response = api.listPlugins(details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Toggle a plugin
     *
     * Allows enabling/disabling a plugin/mod. Requires a server restart.     **Required permissions:**    - **plugin.toggle**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void togglePluginTest() throws ApiException {
        String plugin = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        PluginContainer response = api.togglePlugin(plugin, details, accept, pretty);

        // TODO: test validations
    }
    
}
