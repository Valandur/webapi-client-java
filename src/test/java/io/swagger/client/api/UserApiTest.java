/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AuthenticationRequest;
import io.swagger.client.model.CreateUserRequest;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.InlineResponse403;
import io.swagger.client.model.InlineResponse404;
import io.swagger.client.model.InlineResponse500;
import io.swagger.client.model.ModifyUserRequest;
import io.swagger.client.model.PermissionStruct;
import io.swagger.client.model.UserPermissionStruct;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Create a user
     *
     * Creates a new Web-API user with the specified username and password.     **Required permissions:**    - **user.create**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        CreateUserRequest body = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        UserPermissionStruct response = api.createUser(body, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Delete a user
     *
     * Removes a Web-API user.     **Required permissions:**    - **user.delete**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String name = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        UserPermissionStruct response = api.deleteUser(name, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Check info
     *
     * Checks to see if the passed api key is still valid and retrieves the user info and permissions associated with this key     **Required permissions:**    - **user.**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeTest() throws ApiException {
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        PermissionStruct response = api.getMe(details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * List users
     *
     * Gets a list of all the Web-API users.     **Required permissions:**    - **user.list**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        List<UserPermissionStruct> response = api.getUsers(details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Login
     *
     * Tries to acquire an api key with the passed credentials.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        AuthenticationRequest body = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        PermissionStruct response = api.login(body, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Logout
     *
     * Invalidate the current API key, logging out the active user.     **Required permissions:**    - **user.**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logoutTest() throws ApiException {
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        PermissionStruct response = api.logout(details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * null     **Required permissions:**    - **user.**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logoutRedirectTest() throws ApiException {
        String redirect = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        api.logoutRedirect(redirect, details, accept, pretty);

        // TODO: test validations
    }
    
    /**
     * Update a user
     *
     * Changes the properties of a Web-API user     **Required permissions:**    - **user.modify**   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyUserTest() throws ApiException {
        String name = null;
        ModifyUserRequest body = null;
        Boolean details = null;
        String accept = null;
        Boolean pretty = null;
        UserPermissionStruct response = api.modifyUser(name, body, details, accept, pretty);

        // TODO: test validations
    }
    
}
