/*
 * WebAPI
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ChunkResponse;
import io.swagger.client.model.ChunksResponse;
import io.swagger.client.model.CreateWorldRequest;
import io.swagger.client.model.ExecuteWorldMethodResponse;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.RawRequest;
import io.swagger.client.model.UpdateWorldRequest;
import io.swagger.client.model.WorldResponse;
import io.swagger.client.model.WorldsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorldApi {
    private ApiClient apiClient;

    public WorldApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorldApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for changeWorld
     * @param uuid The uuid of the world. (required)
     * @param updateWorldRequest The new properties of the world (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeWorldCall(String uuid, UpdateWorldRequest updateWorldRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateWorldRequest;
        
        // create path and map variables
        String localVarPath = "/world/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeWorldValidateBeforeCall(String uuid, UpdateWorldRequest updateWorldRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling changeWorld(Async)");
        }
        
        // verify the required parameter 'updateWorldRequest' is set
        if (updateWorldRequest == null) {
            throw new ApiException("Missing the required parameter 'updateWorldRequest' when calling changeWorld(Async)");
        }
        
        
        com.squareup.okhttp.Call call = changeWorldCall(uuid, updateWorldRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Edit world
     * Update the properties of an existing world.  &gt; Required permission: world.change 
     * @param uuid The uuid of the world. (required)
     * @param updateWorldRequest The new properties of the world (required)
     * @return WorldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorldResponse changeWorld(String uuid, UpdateWorldRequest updateWorldRequest) throws ApiException {
        ApiResponse<WorldResponse> resp = changeWorldWithHttpInfo(uuid, updateWorldRequest);
        return resp.getData();
    }

    /**
     * Edit world
     * Update the properties of an existing world.  &gt; Required permission: world.change 
     * @param uuid The uuid of the world. (required)
     * @param updateWorldRequest The new properties of the world (required)
     * @return ApiResponse&lt;WorldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorldResponse> changeWorldWithHttpInfo(String uuid, UpdateWorldRequest updateWorldRequest) throws ApiException {
        com.squareup.okhttp.Call call = changeWorldValidateBeforeCall(uuid, updateWorldRequest, null, null);
        Type localVarReturnType = new TypeToken<WorldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Edit world (asynchronously)
     * Update the properties of an existing world.  &gt; Required permission: world.change 
     * @param uuid The uuid of the world. (required)
     * @param updateWorldRequest The new properties of the world (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeWorldAsync(String uuid, UpdateWorldRequest updateWorldRequest, final ApiCallback<WorldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeWorldValidateBeforeCall(uuid, updateWorldRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createWorld
     * @param createWorldRequest  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createWorldCall(CreateWorldRequest createWorldRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createWorldRequest;
        
        // create path and map variables
        String localVarPath = "/world";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createWorldValidateBeforeCall(CreateWorldRequest createWorldRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createWorldRequest' is set
        if (createWorldRequest == null) {
            throw new ApiException("Missing the required parameter 'createWorldRequest' when calling createWorld(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createWorldCall(createWorldRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a world
     * Creates a new world with the specified settings. This does not yet load the world.  &gt; Required permission: world.create 
     * @param createWorldRequest  (required)
     * @return WorldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorldResponse createWorld(CreateWorldRequest createWorldRequest) throws ApiException {
        ApiResponse<WorldResponse> resp = createWorldWithHttpInfo(createWorldRequest);
        return resp.getData();
    }

    /**
     * Create a world
     * Creates a new world with the specified settings. This does not yet load the world.  &gt; Required permission: world.create 
     * @param createWorldRequest  (required)
     * @return ApiResponse&lt;WorldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorldResponse> createWorldWithHttpInfo(CreateWorldRequest createWorldRequest) throws ApiException {
        com.squareup.okhttp.Call call = createWorldValidateBeforeCall(createWorldRequest, null, null);
        Type localVarReturnType = new TypeToken<WorldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a world (asynchronously)
     * Creates a new world with the specified settings. This does not yet load the world.  &gt; Required permission: world.create 
     * @param createWorldRequest  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createWorldAsync(CreateWorldRequest createWorldRequest, final ApiCallback<WorldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createWorldValidateBeforeCall(createWorldRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteWorld
     * @param uuid The uuid of the world. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWorldCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/world/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWorldValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteWorld(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteWorldCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a world
     * Deletes an existing world. **The world must be unloaded before deleting it**  &gt; Required permission: world.delete 
     * @param uuid The uuid of the world. (required)
     * @return WorldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorldResponse deleteWorld(String uuid) throws ApiException {
        ApiResponse<WorldResponse> resp = deleteWorldWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Delete a world
     * Deletes an existing world. **The world must be unloaded before deleting it**  &gt; Required permission: world.delete 
     * @param uuid The uuid of the world. (required)
     * @return ApiResponse&lt;WorldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorldResponse> deleteWorldWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteWorldValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<WorldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a world (asynchronously)
     * Deletes an existing world. **The world must be unloaded before deleting it**  &gt; Required permission: world.delete 
     * @param uuid The uuid of the world. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWorldAsync(String uuid, final ApiCallback<WorldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWorldValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for executeWorldMethod
     * @param uuid The uuid of the world. (required)
     * @param request Information about which method to execute. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeWorldMethodCall(String uuid, RawRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/world/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeWorldMethodValidateBeforeCall(String uuid, RawRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling executeWorldMethod(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling executeWorldMethod(Async)");
        }
        
        
        com.squareup.okhttp.Call call = executeWorldMethodCall(uuid, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Execute world methods
     * Provides direct access to the underlaying world object and can execute any method on it.  &gt; Required permission: world.method 
     * @param uuid The uuid of the world. (required)
     * @param request Information about which method to execute. (required)
     * @return ExecuteWorldMethodResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExecuteWorldMethodResponse executeWorldMethod(String uuid, RawRequest request) throws ApiException {
        ApiResponse<ExecuteWorldMethodResponse> resp = executeWorldMethodWithHttpInfo(uuid, request);
        return resp.getData();
    }

    /**
     * Execute world methods
     * Provides direct access to the underlaying world object and can execute any method on it.  &gt; Required permission: world.method 
     * @param uuid The uuid of the world. (required)
     * @param request Information about which method to execute. (required)
     * @return ApiResponse&lt;ExecuteWorldMethodResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExecuteWorldMethodResponse> executeWorldMethodWithHttpInfo(String uuid, RawRequest request) throws ApiException {
        com.squareup.okhttp.Call call = executeWorldMethodValidateBeforeCall(uuid, request, null, null);
        Type localVarReturnType = new TypeToken<ExecuteWorldMethodResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute world methods (asynchronously)
     * Provides direct access to the underlaying world object and can execute any method on it.  &gt; Required permission: world.method 
     * @param uuid The uuid of the world. (required)
     * @param request Information about which method to execute. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeWorldMethodAsync(String uuid, RawRequest request, final ApiCallback<ExecuteWorldMethodResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeWorldMethodValidateBeforeCall(uuid, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExecuteWorldMethodResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChunk
     * @param uuid The uuid of the world. (required)
     * @param x The x-coordinate of the chunk. (required)
     * @param z The z-coordinate of the chunk. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChunkCall(String uuid, Integer x, Integer z, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/world/{uuid}/chunk/{x}/{z}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "x" + "\\}", apiClient.escapeString(x.toString()))
            .replaceAll("\\{" + "z" + "\\}", apiClient.escapeString(z.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChunkValidateBeforeCall(String uuid, Integer x, Integer z, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getChunk(Async)");
        }
        
        // verify the required parameter 'x' is set
        if (x == null) {
            throw new ApiException("Missing the required parameter 'x' when calling getChunk(Async)");
        }
        
        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling getChunk(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChunkCall(uuid, x, z, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Detailed chunk info
     * Get detailed information about a chunk  &gt; Required permission: world.chunk.one 
     * @param uuid The uuid of the world. (required)
     * @param x The x-coordinate of the chunk. (required)
     * @param z The z-coordinate of the chunk. (required)
     * @return ChunkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChunkResponse getChunk(String uuid, Integer x, Integer z) throws ApiException {
        ApiResponse<ChunkResponse> resp = getChunkWithHttpInfo(uuid, x, z);
        return resp.getData();
    }

    /**
     * Detailed chunk info
     * Get detailed information about a chunk  &gt; Required permission: world.chunk.one 
     * @param uuid The uuid of the world. (required)
     * @param x The x-coordinate of the chunk. (required)
     * @param z The z-coordinate of the chunk. (required)
     * @return ApiResponse&lt;ChunkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChunkResponse> getChunkWithHttpInfo(String uuid, Integer x, Integer z) throws ApiException {
        com.squareup.okhttp.Call call = getChunkValidateBeforeCall(uuid, x, z, null, null);
        Type localVarReturnType = new TypeToken<ChunkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Detailed chunk info (asynchronously)
     * Get detailed information about a chunk  &gt; Required permission: world.chunk.one 
     * @param uuid The uuid of the world. (required)
     * @param x The x-coordinate of the chunk. (required)
     * @param z The z-coordinate of the chunk. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChunkAsync(String uuid, Integer x, Integer z, final ApiCallback<ChunkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChunkValidateBeforeCall(uuid, x, z, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChunkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChunks
     * @param uuid The uuid of the world. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChunksCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/world/{uuid}/chunk"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChunksValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getChunks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChunksCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Loaded chunk list
     * Gets a list of all the loaded chunks for the specified world.  &gt; Required permission: world.chunk.list 
     * @param uuid The uuid of the world. (required)
     * @return ChunksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChunksResponse getChunks(String uuid) throws ApiException {
        ApiResponse<ChunksResponse> resp = getChunksWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Loaded chunk list
     * Gets a list of all the loaded chunks for the specified world.  &gt; Required permission: world.chunk.list 
     * @param uuid The uuid of the world. (required)
     * @return ApiResponse&lt;ChunksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChunksResponse> getChunksWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = getChunksValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ChunksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Loaded chunk list (asynchronously)
     * Gets a list of all the loaded chunks for the specified world.  &gt; Required permission: world.chunk.list 
     * @param uuid The uuid of the world. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChunksAsync(String uuid, final ApiCallback<ChunksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChunksValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChunksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWorld
     * @param uuid The uuid of the world to get detailed information about. (required)
     * @param fields An optional list of additional fields to get. (optional)
     * @param methods An optional list of additional methods to get. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWorldCall(String uuid, String fields, String methods, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/world/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));
        if (methods != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "methods", methods));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWorldValidateBeforeCall(String uuid, String fields, String methods, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getWorld(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getWorldCall(uuid, fields, methods, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Detailed world info
     * Get detailed information about a world.  &gt; Required permission: world.one 
     * @param uuid The uuid of the world to get detailed information about. (required)
     * @param fields An optional list of additional fields to get. (optional)
     * @param methods An optional list of additional methods to get. (optional)
     * @return WorldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorldResponse getWorld(String uuid, String fields, String methods) throws ApiException {
        ApiResponse<WorldResponse> resp = getWorldWithHttpInfo(uuid, fields, methods);
        return resp.getData();
    }

    /**
     * Detailed world info
     * Get detailed information about a world.  &gt; Required permission: world.one 
     * @param uuid The uuid of the world to get detailed information about. (required)
     * @param fields An optional list of additional fields to get. (optional)
     * @param methods An optional list of additional methods to get. (optional)
     * @return ApiResponse&lt;WorldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorldResponse> getWorldWithHttpInfo(String uuid, String fields, String methods) throws ApiException {
        com.squareup.okhttp.Call call = getWorldValidateBeforeCall(uuid, fields, methods, null, null);
        Type localVarReturnType = new TypeToken<WorldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Detailed world info (asynchronously)
     * Get detailed information about a world.  &gt; Required permission: world.one 
     * @param uuid The uuid of the world to get detailed information about. (required)
     * @param fields An optional list of additional fields to get. (optional)
     * @param methods An optional list of additional methods to get. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWorldAsync(String uuid, String fields, String methods, final ApiCallback<WorldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWorldValidateBeforeCall(uuid, fields, methods, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWorlds
     * @param details Pass this parameter to receive the full details for each world. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWorldsCall(String details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/world";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (details != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "details", details));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWorldsValidateBeforeCall(String details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getWorldsCall(details, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * World list
     * Get a list of all the worlds on the server.  &gt; Required permission: world.list 
     * @param details Pass this parameter to receive the full details for each world. (optional)
     * @return WorldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorldsResponse getWorlds(String details) throws ApiException {
        ApiResponse<WorldsResponse> resp = getWorldsWithHttpInfo(details);
        return resp.getData();
    }

    /**
     * World list
     * Get a list of all the worlds on the server.  &gt; Required permission: world.list 
     * @param details Pass this parameter to receive the full details for each world. (optional)
     * @return ApiResponse&lt;WorldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorldsResponse> getWorldsWithHttpInfo(String details) throws ApiException {
        com.squareup.okhttp.Call call = getWorldsValidateBeforeCall(details, null, null);
        Type localVarReturnType = new TypeToken<WorldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * World list (asynchronously)
     * Get a list of all the worlds on the server.  &gt; Required permission: world.list 
     * @param details Pass this parameter to receive the full details for each world. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWorldsAsync(String details, final ApiCallback<WorldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWorldsValidateBeforeCall(details, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
