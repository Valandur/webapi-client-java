/*
 * WebAPI
 * Access Sponge powered Minecraft servers through a WebAPI  #/ Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  #/ Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ExecuteTileEntityMethodResponse;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.RawRequest;
import io.swagger.client.model.TileEntitiesResponse;
import io.swagger.client.model.TileEntityResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TileEntityApi {
    private ApiClient apiClient;

    public TileEntityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TileEntityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for executeTileEntityMethod
     * @param worldUuid The uuid of the world the tile entity is in. (required)
     * @param x The x-coordinate of the tile entity. (required)
     * @param y The y-coordinate of the tile entity. (required)
     * @param z The z-coordinate of the tile entity. (required)
     * @param request Information about which method to execute. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeTileEntityMethodCall(String worldUuid, String x, String y, String z, RawRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/tile-entity/{worldUuid}/{x}/{y}/{z}"
            .replaceAll("\\{" + "worldUuid" + "\\}", apiClient.escapeString(worldUuid.toString()))
            .replaceAll("\\{" + "x" + "\\}", apiClient.escapeString(x.toString()))
            .replaceAll("\\{" + "y" + "\\}", apiClient.escapeString(y.toString()))
            .replaceAll("\\{" + "z" + "\\}", apiClient.escapeString(z.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeTileEntityMethodValidateBeforeCall(String worldUuid, String x, String y, String z, RawRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'worldUuid' is set
        if (worldUuid == null) {
            throw new ApiException("Missing the required parameter 'worldUuid' when calling executeTileEntityMethod(Async)");
        }
        
        // verify the required parameter 'x' is set
        if (x == null) {
            throw new ApiException("Missing the required parameter 'x' when calling executeTileEntityMethod(Async)");
        }
        
        // verify the required parameter 'y' is set
        if (y == null) {
            throw new ApiException("Missing the required parameter 'y' when calling executeTileEntityMethod(Async)");
        }
        
        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling executeTileEntityMethod(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling executeTileEntityMethod(Async)");
        }
        
        
        com.squareup.okhttp.Call call = executeTileEntityMethodCall(worldUuid, x, y, z, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Execute tile entity methods
     * Provides direct access to the underlaying tile entity object and can execute any method on it.  &gt; Required permission: tile-entity.method 
     * @param worldUuid The uuid of the world the tile entity is in. (required)
     * @param x The x-coordinate of the tile entity. (required)
     * @param y The y-coordinate of the tile entity. (required)
     * @param z The z-coordinate of the tile entity. (required)
     * @param request Information about which method to execute. (required)
     * @return ExecuteTileEntityMethodResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExecuteTileEntityMethodResponse executeTileEntityMethod(String worldUuid, String x, String y, String z, RawRequest request) throws ApiException {
        ApiResponse<ExecuteTileEntityMethodResponse> resp = executeTileEntityMethodWithHttpInfo(worldUuid, x, y, z, request);
        return resp.getData();
    }

    /**
     * Execute tile entity methods
     * Provides direct access to the underlaying tile entity object and can execute any method on it.  &gt; Required permission: tile-entity.method 
     * @param worldUuid The uuid of the world the tile entity is in. (required)
     * @param x The x-coordinate of the tile entity. (required)
     * @param y The y-coordinate of the tile entity. (required)
     * @param z The z-coordinate of the tile entity. (required)
     * @param request Information about which method to execute. (required)
     * @return ApiResponse&lt;ExecuteTileEntityMethodResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExecuteTileEntityMethodResponse> executeTileEntityMethodWithHttpInfo(String worldUuid, String x, String y, String z, RawRequest request) throws ApiException {
        com.squareup.okhttp.Call call = executeTileEntityMethodValidateBeforeCall(worldUuid, x, y, z, request, null, null);
        Type localVarReturnType = new TypeToken<ExecuteTileEntityMethodResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute tile entity methods (asynchronously)
     * Provides direct access to the underlaying tile entity object and can execute any method on it.  &gt; Required permission: tile-entity.method 
     * @param worldUuid The uuid of the world the tile entity is in. (required)
     * @param x The x-coordinate of the tile entity. (required)
     * @param y The y-coordinate of the tile entity. (required)
     * @param z The z-coordinate of the tile entity. (required)
     * @param request Information about which method to execute. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeTileEntityMethodAsync(String worldUuid, String x, String y, String z, RawRequest request, final ApiCallback<ExecuteTileEntityMethodResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeTileEntityMethodValidateBeforeCall(worldUuid, x, y, z, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExecuteTileEntityMethodResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTileEntities
     * @param world The uuid of the world to filter entities by. (optional)
     * @param type The TileEntityType id to filter the tile entities by. (optional)
     * @param limit The maximum amount of tile entities to return. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTileEntitiesCall(String world, String type, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tile-entity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (world != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "world", world));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTileEntitiesValidateBeforeCall(String world, String type, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getTileEntitiesCall(world, type, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Tile entities list
     * Get a list of all tile entities on the server (in all worlds, unless specified).  &gt; Required permission: tile-entity.list 
     * @param world The uuid of the world to filter entities by. (optional)
     * @param type The TileEntityType id to filter the tile entities by. (optional)
     * @param limit The maximum amount of tile entities to return. (optional)
     * @return TileEntitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TileEntitiesResponse getTileEntities(String world, String type, String limit) throws ApiException {
        ApiResponse<TileEntitiesResponse> resp = getTileEntitiesWithHttpInfo(world, type, limit);
        return resp.getData();
    }

    /**
     * Tile entities list
     * Get a list of all tile entities on the server (in all worlds, unless specified).  &gt; Required permission: tile-entity.list 
     * @param world The uuid of the world to filter entities by. (optional)
     * @param type The TileEntityType id to filter the tile entities by. (optional)
     * @param limit The maximum amount of tile entities to return. (optional)
     * @return ApiResponse&lt;TileEntitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TileEntitiesResponse> getTileEntitiesWithHttpInfo(String world, String type, String limit) throws ApiException {
        com.squareup.okhttp.Call call = getTileEntitiesValidateBeforeCall(world, type, limit, null, null);
        Type localVarReturnType = new TypeToken<TileEntitiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Tile entities list (asynchronously)
     * Get a list of all tile entities on the server (in all worlds, unless specified).  &gt; Required permission: tile-entity.list 
     * @param world The uuid of the world to filter entities by. (optional)
     * @param type The TileEntityType id to filter the tile entities by. (optional)
     * @param limit The maximum amount of tile entities to return. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTileEntitiesAsync(String world, String type, String limit, final ApiCallback<TileEntitiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTileEntitiesValidateBeforeCall(world, type, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TileEntitiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTileEntity
     * @param worldUuid The uuid of the world the tile entity is in. (required)
     * @param x The x-coordinate of the tile entity. (required)
     * @param y The y-coordinate of the tile entity. (required)
     * @param z The z-coordinate of the tile entity. (required)
     * @param fields An optional list of additional fields to get. (optional)
     * @param methods An optional list of additional methods to get. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTileEntityCall(String worldUuid, String x, String y, String z, String fields, String methods, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tile-entity/{worldUuid}/{x}/{y}/{z}"
            .replaceAll("\\{" + "worldUuid" + "\\}", apiClient.escapeString(worldUuid.toString()))
            .replaceAll("\\{" + "x" + "\\}", apiClient.escapeString(x.toString()))
            .replaceAll("\\{" + "y" + "\\}", apiClient.escapeString(y.toString()))
            .replaceAll("\\{" + "z" + "\\}", apiClient.escapeString(z.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));
        if (methods != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "methods", methods));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTileEntityValidateBeforeCall(String worldUuid, String x, String y, String z, String fields, String methods, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'worldUuid' is set
        if (worldUuid == null) {
            throw new ApiException("Missing the required parameter 'worldUuid' when calling getTileEntity(Async)");
        }
        
        // verify the required parameter 'x' is set
        if (x == null) {
            throw new ApiException("Missing the required parameter 'x' when calling getTileEntity(Async)");
        }
        
        // verify the required parameter 'y' is set
        if (y == null) {
            throw new ApiException("Missing the required parameter 'y' when calling getTileEntity(Async)");
        }
        
        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling getTileEntity(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTileEntityCall(worldUuid, x, y, z, fields, methods, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Detailed tile entity info
     * Get detailed information about a tile entity.  &gt; Required permission: tile-entity.one 
     * @param worldUuid The uuid of the world the tile entity is in. (required)
     * @param x The x-coordinate of the tile entity. (required)
     * @param y The y-coordinate of the tile entity. (required)
     * @param z The z-coordinate of the tile entity. (required)
     * @param fields An optional list of additional fields to get. (optional)
     * @param methods An optional list of additional methods to get. (optional)
     * @return TileEntityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TileEntityResponse getTileEntity(String worldUuid, String x, String y, String z, String fields, String methods) throws ApiException {
        ApiResponse<TileEntityResponse> resp = getTileEntityWithHttpInfo(worldUuid, x, y, z, fields, methods);
        return resp.getData();
    }

    /**
     * Detailed tile entity info
     * Get detailed information about a tile entity.  &gt; Required permission: tile-entity.one 
     * @param worldUuid The uuid of the world the tile entity is in. (required)
     * @param x The x-coordinate of the tile entity. (required)
     * @param y The y-coordinate of the tile entity. (required)
     * @param z The z-coordinate of the tile entity. (required)
     * @param fields An optional list of additional fields to get. (optional)
     * @param methods An optional list of additional methods to get. (optional)
     * @return ApiResponse&lt;TileEntityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TileEntityResponse> getTileEntityWithHttpInfo(String worldUuid, String x, String y, String z, String fields, String methods) throws ApiException {
        com.squareup.okhttp.Call call = getTileEntityValidateBeforeCall(worldUuid, x, y, z, fields, methods, null, null);
        Type localVarReturnType = new TypeToken<TileEntityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Detailed tile entity info (asynchronously)
     * Get detailed information about a tile entity.  &gt; Required permission: tile-entity.one 
     * @param worldUuid The uuid of the world the tile entity is in. (required)
     * @param x The x-coordinate of the tile entity. (required)
     * @param y The y-coordinate of the tile entity. (required)
     * @param z The z-coordinate of the tile entity. (required)
     * @param fields An optional list of additional fields to get. (optional)
     * @param methods An optional list of additional methods to get. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTileEntityAsync(String worldUuid, String x, String y, String z, String fields, String methods, final ApiCallback<TileEntityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTileEntityValidateBeforeCall(worldUuid, x, y, z, fields, methods, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TileEntityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
