/*
 * WebAPI
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateEntityRequest;
import io.swagger.client.model.EntitiesList;
import io.swagger.client.model.EntityMethodResult;
import io.swagger.client.model.EntityResponse;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.RawRequest;
import io.swagger.client.model.UpdateEntityRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntityApi {
    private ApiClient apiClient;

    public EntityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for changeEntity
     * @param uuid The uuid of the entity. (required)
     * @param updateEntityRequest The new properties of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeEntityCall(String uuid, UpdateEntityRequest updateEntityRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateEntityRequest;
        
        // create path and map variables
        String localVarPath = "/entity/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeEntityValidateBeforeCall(String uuid, UpdateEntityRequest updateEntityRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling changeEntity(Async)");
        }
        
        // verify the required parameter 'updateEntityRequest' is set
        if (updateEntityRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEntityRequest' when calling changeEntity(Async)");
        }
        
        
        com.squareup.okhttp.Call call = changeEntityCall(uuid, updateEntityRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Edit entity
     * Update the properties of an existing entity.  &gt; Required permission: entity.change 
     * @param uuid The uuid of the entity. (required)
     * @param updateEntityRequest The new properties of the entity (required)
     * @return EntityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityResponse changeEntity(String uuid, UpdateEntityRequest updateEntityRequest) throws ApiException {
        ApiResponse<EntityResponse> resp = changeEntityWithHttpInfo(uuid, updateEntityRequest);
        return resp.getData();
    }

    /**
     * Edit entity
     * Update the properties of an existing entity.  &gt; Required permission: entity.change 
     * @param uuid The uuid of the entity. (required)
     * @param updateEntityRequest The new properties of the entity (required)
     * @return ApiResponse&lt;EntityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityResponse> changeEntityWithHttpInfo(String uuid, UpdateEntityRequest updateEntityRequest) throws ApiException {
        com.squareup.okhttp.Call call = changeEntityValidateBeforeCall(uuid, updateEntityRequest, null, null);
        Type localVarReturnType = new TypeToken<EntityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Edit entity (asynchronously)
     * Update the properties of an existing entity.  &gt; Required permission: entity.change 
     * @param uuid The uuid of the entity. (required)
     * @param updateEntityRequest The new properties of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeEntityAsync(String uuid, UpdateEntityRequest updateEntityRequest, final ApiCallback<EntityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeEntityValidateBeforeCall(uuid, updateEntityRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createEntity
     * @param createEntityRequest  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEntityCall(CreateEntityRequest createEntityRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createEntityRequest;
        
        // create path and map variables
        String localVarPath = "/entity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEntityValidateBeforeCall(CreateEntityRequest createEntityRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createEntityRequest' is set
        if (createEntityRequest == null) {
            throw new ApiException("Missing the required parameter 'createEntityRequest' when calling createEntity(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createEntityCall(createEntityRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an entity
     * Creates &amp; Spawns a new entity with the specified properties.  &gt; Required permission: entity.create 
     * @param createEntityRequest  (required)
     * @return EntityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityResponse createEntity(CreateEntityRequest createEntityRequest) throws ApiException {
        ApiResponse<EntityResponse> resp = createEntityWithHttpInfo(createEntityRequest);
        return resp.getData();
    }

    /**
     * Create an entity
     * Creates &amp; Spawns a new entity with the specified properties.  &gt; Required permission: entity.create 
     * @param createEntityRequest  (required)
     * @return ApiResponse&lt;EntityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityResponse> createEntityWithHttpInfo(CreateEntityRequest createEntityRequest) throws ApiException {
        com.squareup.okhttp.Call call = createEntityValidateBeforeCall(createEntityRequest, null, null);
        Type localVarReturnType = new TypeToken<EntityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an entity (asynchronously)
     * Creates &amp; Spawns a new entity with the specified properties.  &gt; Required permission: entity.create 
     * @param createEntityRequest  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEntityAsync(CreateEntityRequest createEntityRequest, final ApiCallback<EntityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEntityValidateBeforeCall(createEntityRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for destroyEntity
     * @param uuid The uuid of the entity. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyEntityCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entity/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyEntityValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling destroyEntity(Async)");
        }
        
        
        com.squareup.okhttp.Call call = destroyEntityCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Destroy an entity
     * Destroys an entity.  &gt; Required permission: entity.delete 
     * @param uuid The uuid of the entity. (required)
     * @return EntityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityResponse destroyEntity(String uuid) throws ApiException {
        ApiResponse<EntityResponse> resp = destroyEntityWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Destroy an entity
     * Destroys an entity.  &gt; Required permission: entity.delete 
     * @param uuid The uuid of the entity. (required)
     * @return ApiResponse&lt;EntityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityResponse> destroyEntityWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = destroyEntityValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<EntityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Destroy an entity (asynchronously)
     * Destroys an entity.  &gt; Required permission: entity.delete 
     * @param uuid The uuid of the entity. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyEntityAsync(String uuid, final ApiCallback<EntityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyEntityValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for executeEntityMethod
     * @param uuid The uuid of the entity. (required)
     * @param request Information about which method to execute. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeEntityMethodCall(String uuid, RawRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/entity/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeEntityMethodValidateBeforeCall(String uuid, RawRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling executeEntityMethod(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling executeEntityMethod(Async)");
        }
        
        
        com.squareup.okhttp.Call call = executeEntityMethodCall(uuid, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Execute entity method
     * Provides direct access to the underlaying entity object and can execute any method on it.  &gt; Required permission: entity.method 
     * @param uuid The uuid of the entity. (required)
     * @param request Information about which method to execute. (required)
     * @return EntityMethodResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityMethodResult executeEntityMethod(String uuid, RawRequest request) throws ApiException {
        ApiResponse<EntityMethodResult> resp = executeEntityMethodWithHttpInfo(uuid, request);
        return resp.getData();
    }

    /**
     * Execute entity method
     * Provides direct access to the underlaying entity object and can execute any method on it.  &gt; Required permission: entity.method 
     * @param uuid The uuid of the entity. (required)
     * @param request Information about which method to execute. (required)
     * @return ApiResponse&lt;EntityMethodResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityMethodResult> executeEntityMethodWithHttpInfo(String uuid, RawRequest request) throws ApiException {
        com.squareup.okhttp.Call call = executeEntityMethodValidateBeforeCall(uuid, request, null, null);
        Type localVarReturnType = new TypeToken<EntityMethodResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute entity method (asynchronously)
     * Provides direct access to the underlaying entity object and can execute any method on it.  &gt; Required permission: entity.method 
     * @param uuid The uuid of the entity. (required)
     * @param request Information about which method to execute. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeEntityMethodAsync(String uuid, RawRequest request, final ApiCallback<EntityMethodResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeEntityMethodValidateBeforeCall(uuid, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityMethodResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEntities
     * @param details Pass this parameter to receive the full details for each entity. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEntitiesCall(String details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (details != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "details", details));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEntitiesValidateBeforeCall(String details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getEntitiesCall(details, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Entities list
     * Get a list of all entities on the server (in all worlds).  &gt; Required permission: entity.list 
     * @param details Pass this parameter to receive the full details for each entity. (optional)
     * @return EntitiesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntitiesList getEntities(String details) throws ApiException {
        ApiResponse<EntitiesList> resp = getEntitiesWithHttpInfo(details);
        return resp.getData();
    }

    /**
     * Entities list
     * Get a list of all entities on the server (in all worlds).  &gt; Required permission: entity.list 
     * @param details Pass this parameter to receive the full details for each entity. (optional)
     * @return ApiResponse&lt;EntitiesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntitiesList> getEntitiesWithHttpInfo(String details) throws ApiException {
        com.squareup.okhttp.Call call = getEntitiesValidateBeforeCall(details, null, null);
        Type localVarReturnType = new TypeToken<EntitiesList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Entities list (asynchronously)
     * Get a list of all entities on the server (in all worlds).  &gt; Required permission: entity.list 
     * @param details Pass this parameter to receive the full details for each entity. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEntitiesAsync(String details, final ApiCallback<EntitiesList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEntitiesValidateBeforeCall(details, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntitiesList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEntity
     * @param uuid The uuid of the entity to get detailed information about. (required)
     * @param fields An optional list of additional fields to get. (optional)
     * @param methods An optional list of additional methods to get. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEntityCall(String uuid, String fields, String methods, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entity/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));
        if (methods != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "methods", methods));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "headerKey", "queryKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEntityValidateBeforeCall(String uuid, String fields, String methods, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getEntity(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEntityCall(uuid, fields, methods, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Detailed entity info
     * Get detailed information about an entity.  &gt; Required permission: entity.one 
     * @param uuid The uuid of the entity to get detailed information about. (required)
     * @param fields An optional list of additional fields to get. (optional)
     * @param methods An optional list of additional methods to get. (optional)
     * @return EntityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityResponse getEntity(String uuid, String fields, String methods) throws ApiException {
        ApiResponse<EntityResponse> resp = getEntityWithHttpInfo(uuid, fields, methods);
        return resp.getData();
    }

    /**
     * Detailed entity info
     * Get detailed information about an entity.  &gt; Required permission: entity.one 
     * @param uuid The uuid of the entity to get detailed information about. (required)
     * @param fields An optional list of additional fields to get. (optional)
     * @param methods An optional list of additional methods to get. (optional)
     * @return ApiResponse&lt;EntityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityResponse> getEntityWithHttpInfo(String uuid, String fields, String methods) throws ApiException {
        com.squareup.okhttp.Call call = getEntityValidateBeforeCall(uuid, fields, methods, null, null);
        Type localVarReturnType = new TypeToken<EntityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Detailed entity info (asynchronously)
     * Get detailed information about an entity.  &gt; Required permission: entity.one 
     * @param uuid The uuid of the entity to get detailed information about. (required)
     * @param fields An optional list of additional fields to get. (optional)
     * @param methods An optional list of additional methods to get. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEntityAsync(String uuid, String fields, String methods, final ApiCallback<EntityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEntityValidateBeforeCall(uuid, fields, methods, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
