/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CatalogType;
import io.swagger.client.model.Vector3i;
import java.io.IOException;

/**
 * StructureData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-13T12:26:34.036+02:00")
public class StructureData {
  @SerializedName("author")
  private String author = null;

  @SerializedName("ignoreEntities")
  private Boolean ignoreEntities = null;

  @SerializedName("integrity")
  private Float integrity = null;

  @SerializedName("mode")
  private CatalogType mode = null;

  @SerializedName("position")
  private Vector3i position = null;

  @SerializedName("powered")
  private Boolean powered = null;

  @SerializedName("seed")
  private Long seed = null;

  @SerializedName("showAir")
  private Boolean showAir = null;

  @SerializedName("showBoundingBox")
  private Boolean showBoundingBox = null;

  @SerializedName("size")
  private Vector3i size = null;

  public StructureData author(String author) {
    this.author = author;
    return this;
  }

   /**
   * The author of this structure
   * @return author
  **/
  @ApiModelProperty(required = true, value = "The author of this structure")
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }

  public StructureData ignoreEntities(Boolean ignoreEntities) {
    this.ignoreEntities = ignoreEntities;
    return this;
  }

   /**
   * True if entities are not part of this structure, false otherwise
   * @return ignoreEntities
  **/
  @ApiModelProperty(required = true, value = "True if entities are not part of this structure, false otherwise")
  public Boolean isIgnoreEntities() {
    return ignoreEntities;
  }

  public void setIgnoreEntities(Boolean ignoreEntities) {
    this.ignoreEntities = ignoreEntities;
  }

  public StructureData integrity(Float integrity) {
    this.integrity = integrity;
    return this;
  }

   /**
   * The integrity of the structure
   * @return integrity
  **/
  @ApiModelProperty(required = true, value = "The integrity of the structure")
  public Float getIntegrity() {
    return integrity;
  }

  public void setIntegrity(Float integrity) {
    this.integrity = integrity;
  }

  public StructureData mode(CatalogType mode) {
    this.mode = mode;
    return this;
  }

   /**
   * The mode of the structure
   * @return mode
  **/
  @ApiModelProperty(required = true, value = "The mode of the structure")
  public CatalogType getMode() {
    return mode;
  }

  public void setMode(CatalogType mode) {
    this.mode = mode;
  }

  public StructureData position(Vector3i position) {
    this.position = position;
    return this;
  }

   /**
   * The position of the structure
   * @return position
  **/
  @ApiModelProperty(required = true, value = "The position of the structure")
  public Vector3i getPosition() {
    return position;
  }

  public void setPosition(Vector3i position) {
    this.position = position;
  }

  public StructureData powered(Boolean powered) {
    this.powered = powered;
    return this;
  }

   /**
   * True if the structure is powered, false otherwise
   * @return powered
  **/
  @ApiModelProperty(required = true, value = "True if the structure is powered, false otherwise")
  public Boolean isPowered() {
    return powered;
  }

  public void setPowered(Boolean powered) {
    this.powered = powered;
  }

  public StructureData seed(Long seed) {
    this.seed = seed;
    return this;
  }

   /**
   * The seed of this structure
   * @return seed
  **/
  @ApiModelProperty(required = true, value = "The seed of this structure")
  public Long getSeed() {
    return seed;
  }

  public void setSeed(Long seed) {
    this.seed = seed;
  }

  public StructureData showAir(Boolean showAir) {
    this.showAir = showAir;
    return this;
  }

   /**
   * True if the air blocks for this structure are shown, false otherwise
   * @return showAir
  **/
  @ApiModelProperty(required = true, value = "True if the air blocks for this structure are shown, false otherwise")
  public Boolean isShowAir() {
    return showAir;
  }

  public void setShowAir(Boolean showAir) {
    this.showAir = showAir;
  }

  public StructureData showBoundingBox(Boolean showBoundingBox) {
    this.showBoundingBox = showBoundingBox;
    return this;
  }

   /**
   * True if the bounding box for this structure is shown, false otherwise
   * @return showBoundingBox
  **/
  @ApiModelProperty(required = true, value = "True if the bounding box for this structure is shown, false otherwise")
  public Boolean isShowBoundingBox() {
    return showBoundingBox;
  }

  public void setShowBoundingBox(Boolean showBoundingBox) {
    this.showBoundingBox = showBoundingBox;
  }

  public StructureData size(Vector3i size) {
    this.size = size;
    return this;
  }

   /**
   * The size of this structure
   * @return size
  **/
  @ApiModelProperty(required = true, value = "The size of this structure")
  public Vector3i getSize() {
    return size;
  }

  public void setSize(Vector3i size) {
    this.size = size;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StructureData structureData = (StructureData) o;
    return Objects.equals(this.author, structureData.author) &&
        Objects.equals(this.ignoreEntities, structureData.ignoreEntities) &&
        Objects.equals(this.integrity, structureData.integrity) &&
        Objects.equals(this.mode, structureData.mode) &&
        Objects.equals(this.position, structureData.position) &&
        Objects.equals(this.powered, structureData.powered) &&
        Objects.equals(this.seed, structureData.seed) &&
        Objects.equals(this.showAir, structureData.showAir) &&
        Objects.equals(this.showBoundingBox, structureData.showBoundingBox) &&
        Objects.equals(this.size, structureData.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, ignoreEntities, integrity, mode, position, powered, seed, showAir, showBoundingBox, size);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StructureData {\n");
    
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    ignoreEntities: ").append(toIndentedString(ignoreEntities)).append("\n");
    sb.append("    integrity: ").append(toIndentedString(integrity)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    powered: ").append(toIndentedString(powered)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    showAir: ").append(toIndentedString(showAir)).append("\n");
    sb.append("    showBoundingBox: ").append(toIndentedString(showBoundingBox)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

