/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ItemStack;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * NucleusKit
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-13T12:26:34.036+02:00")
public class NucleusKit {
  @SerializedName("commands")
  private List<String> commands = new ArrayList<String>();

  @SerializedName("cooldown")
  private Long cooldown = null;

  @SerializedName("cost")
  private Double cost = null;

  @SerializedName("firstJoinKit")
  private Boolean firstJoinKit = null;

  @SerializedName("link")
  private String link = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("oneTime")
  private Boolean oneTime = null;

  @SerializedName("stacks")
  private List<ItemStack> stacks = new ArrayList<ItemStack>();

  public NucleusKit commands(List<String> commands) {
    this.commands = commands;
    return this;
  }

  public NucleusKit addCommandsItem(String commandsItem) {
    this.commands.add(commandsItem);
    return this;
  }

   /**
   * The commands that are executed when this kit is purchased/acquired by a player
   * @return commands
  **/
  @ApiModelProperty(required = true, value = "The commands that are executed when this kit is purchased/acquired by a player")
  public List<String> getCommands() {
    return commands;
  }

  public void setCommands(List<String> commands) {
    this.commands = commands;
  }

  public NucleusKit cooldown(Long cooldown) {
    this.cooldown = cooldown;
    return this;
  }

   /**
   * The cooldown (in seconds) this kit is on after buying it (per player)
   * @return cooldown
  **/
  @ApiModelProperty(required = true, value = "The cooldown (in seconds) this kit is on after buying it (per player)")
  public Long getCooldown() {
    return cooldown;
  }

  public void setCooldown(Long cooldown) {
    this.cooldown = cooldown;
  }

  public NucleusKit cost(Double cost) {
    this.cost = cost;
    return this;
  }

   /**
   * The cost to buy this kit
   * @return cost
  **/
  @ApiModelProperty(required = true, value = "The cost to buy this kit")
  public Double getCost() {
    return cost;
  }

  public void setCost(Double cost) {
    this.cost = cost;
  }

  public NucleusKit firstJoinKit(Boolean firstJoinKit) {
    this.firstJoinKit = firstJoinKit;
    return this;
  }

   /**
   * True if this kit is awarded for joining the server the first time, false otherwise
   * @return firstJoinKit
  **/
  @ApiModelProperty(required = true, value = "True if this kit is awarded for joining the server the first time, false otherwise")
  public Boolean isFirstJoinKit() {
    return firstJoinKit;
  }

  public void setFirstJoinKit(Boolean firstJoinKit) {
    this.firstJoinKit = firstJoinKit;
  }

   /**
   * The API link that can be used to obtain more information about this object
   * @return link
  **/
  @ApiModelProperty(required = true, value = "The API link that can be used to obtain more information about this object")
  public String getLink() {
    return link;
  }

  public NucleusKit name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The unique name of this kit
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The unique name of this kit")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NucleusKit oneTime(Boolean oneTime) {
    this.oneTime = oneTime;
    return this;
  }

   /**
   * True if this kit can only be purchased/acquired once, false otherwise
   * @return oneTime
  **/
  @ApiModelProperty(required = true, value = "True if this kit can only be purchased/acquired once, false otherwise")
  public Boolean isOneTime() {
    return oneTime;
  }

  public void setOneTime(Boolean oneTime) {
    this.oneTime = oneTime;
  }

  public NucleusKit stacks(List<ItemStack> stacks) {
    this.stacks = stacks;
    return this;
  }

  public NucleusKit addStacksItem(ItemStack stacksItem) {
    this.stacks.add(stacksItem);
    return this;
  }

   /**
   * The ItemStacks that are awarded to the player who buys/acquires this kit
   * @return stacks
  **/
  @ApiModelProperty(required = true, value = "The ItemStacks that are awarded to the player who buys/acquires this kit")
  public List<ItemStack> getStacks() {
    return stacks;
  }

  public void setStacks(List<ItemStack> stacks) {
    this.stacks = stacks;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NucleusKit nucleusKit = (NucleusKit) o;
    return Objects.equals(this.commands, nucleusKit.commands) &&
        Objects.equals(this.cooldown, nucleusKit.cooldown) &&
        Objects.equals(this.cost, nucleusKit.cost) &&
        Objects.equals(this.firstJoinKit, nucleusKit.firstJoinKit) &&
        Objects.equals(this.link, nucleusKit.link) &&
        Objects.equals(this.name, nucleusKit.name) &&
        Objects.equals(this.oneTime, nucleusKit.oneTime) &&
        Objects.equals(this.stacks, nucleusKit.stacks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commands, cooldown, cost, firstJoinKit, link, name, oneTime, stacks);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NucleusKit {\n");
    
    sb.append("    commands: ").append(toIndentedString(commands)).append("\n");
    sb.append("    cooldown: ").append(toIndentedString(cooldown)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    firstJoinKit: ").append(toIndentedString(firstJoinKit)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oneTime: ").append(toIndentedString(oneTime)).append("\n");
    sb.append("    stacks: ").append(toIndentedString(stacks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

