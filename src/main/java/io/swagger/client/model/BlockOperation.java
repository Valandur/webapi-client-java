/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Vector3i;
import io.swagger.client.model.World;
import java.io.IOException;
import java.util.UUID;

/**
 * BlockOperation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-14T13:42:56.227+02:00")
public class BlockOperation {
  @SerializedName("error")
  private String error = null;

  @SerializedName("errored")
  private Boolean errored = null;

  @SerializedName("estimatedSecondsRemaining")
  private Float estimatedSecondsRemaining = null;

  @SerializedName("link")
  private String link = null;

  @SerializedName("max")
  private Vector3i max = null;

  @SerializedName("min")
  private Vector3i min = null;

  @SerializedName("progress")
  private Float progress = null;

  /**
   * The current status of the block operation
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    INIT("INIT"),
    
    RUNNING("RUNNING"),
    
    PAUSED("PAUSED"),
    
    DONE("DONE"),
    
    ERRORED("ERRORED"),
    
    CANCELED("CANCELED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  /**
   * The type of block operation
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    GET("GET"),
    
    CHANGE("CHANGE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("uuid")
  private UUID uuid = null;

  @SerializedName("world")
  private World world = null;

  public BlockOperation error(String error) {
    this.error = error;
    return this;
  }

   /**
   * The error message, if any
   * @return error
  **/
  @ApiModelProperty(required = true, value = "The error message, if any")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }

  public BlockOperation errored(Boolean errored) {
    this.errored = errored;
    return this;
  }

   /**
   * True if this block operation produced errors, false otherwise.
   * @return errored
  **/
  @ApiModelProperty(required = true, value = "True if this block operation produced errors, false otherwise.")
  public Boolean isErrored() {
    return errored;
  }

  public void setErrored(Boolean errored) {
    this.errored = errored;
  }

  public BlockOperation estimatedSecondsRemaining(Float estimatedSecondsRemaining) {
    this.estimatedSecondsRemaining = estimatedSecondsRemaining;
    return this;
  }

   /**
   * The estimated amount of time remaining until this block operation is complete (in seconds)
   * @return estimatedSecondsRemaining
  **/
  @ApiModelProperty(required = true, value = "The estimated amount of time remaining until this block operation is complete (in seconds)")
  public Float getEstimatedSecondsRemaining() {
    return estimatedSecondsRemaining;
  }

  public void setEstimatedSecondsRemaining(Float estimatedSecondsRemaining) {
    this.estimatedSecondsRemaining = estimatedSecondsRemaining;
  }

   /**
   * The API link that can be used to obtain more information about this object
   * @return link
  **/
  @ApiModelProperty(required = true, value = "The API link that can be used to obtain more information about this object")
  public String getLink() {
    return link;
  }

  public BlockOperation max(Vector3i max) {
    this.max = max;
    return this;
  }

   /**
   * The maximum block belonging to this operation
   * @return max
  **/
  @ApiModelProperty(required = true, value = "The maximum block belonging to this operation")
  public Vector3i getMax() {
    return max;
  }

  public void setMax(Vector3i max) {
    this.max = max;
  }

  public BlockOperation min(Vector3i min) {
    this.min = min;
    return this;
  }

   /**
   * The minimum block belonging to this operation
   * @return min
  **/
  @ApiModelProperty(required = true, value = "The minimum block belonging to this operation")
  public Vector3i getMin() {
    return min;
  }

  public void setMin(Vector3i min) {
    this.min = min;
  }

  public BlockOperation progress(Float progress) {
    this.progress = progress;
    return this;
  }

   /**
   * The current progress of the block operation, from 0 (&#x3D;started) to 1 (&#x3D;finished)
   * @return progress
  **/
  @ApiModelProperty(required = true, value = "The current progress of the block operation, from 0 (=started) to 1 (=finished)")
  public Float getProgress() {
    return progress;
  }

  public void setProgress(Float progress) {
    this.progress = progress;
  }

  public BlockOperation status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The current status of the block operation
   * @return status
  **/
  @ApiModelProperty(required = true, value = "The current status of the block operation")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public BlockOperation type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of block operation
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The type of block operation")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public BlockOperation uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The unique UUID identifying this block operation
   * @return uuid
  **/
  @ApiModelProperty(required = true, value = "The unique UUID identifying this block operation")
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }

  public BlockOperation world(World world) {
    this.world = world;
    return this;
  }

   /**
   * The world in which this block operation is running
   * @return world
  **/
  @ApiModelProperty(required = true, value = "The world in which this block operation is running")
  public World getWorld() {
    return world;
  }

  public void setWorld(World world) {
    this.world = world;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockOperation blockOperation = (BlockOperation) o;
    return Objects.equals(this.error, blockOperation.error) &&
        Objects.equals(this.errored, blockOperation.errored) &&
        Objects.equals(this.estimatedSecondsRemaining, blockOperation.estimatedSecondsRemaining) &&
        Objects.equals(this.link, blockOperation.link) &&
        Objects.equals(this.max, blockOperation.max) &&
        Objects.equals(this.min, blockOperation.min) &&
        Objects.equals(this.progress, blockOperation.progress) &&
        Objects.equals(this.status, blockOperation.status) &&
        Objects.equals(this.type, blockOperation.type) &&
        Objects.equals(this.uuid, blockOperation.uuid) &&
        Objects.equals(this.world, blockOperation.world);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, errored, estimatedSecondsRemaining, link, max, min, progress, status, type, uuid, world);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockOperation {\n");
    
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    errored: ").append(toIndentedString(errored)).append("\n");
    sb.append("    estimatedSecondsRemaining: ").append(toIndentedString(estimatedSecondsRemaining)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    world: ").append(toIndentedString(world)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

