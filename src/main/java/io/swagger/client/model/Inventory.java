/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CatalogTypeInventoryArchetype;
import io.swagger.client.model.Slot;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Inventory
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-23T13:32:53.543+02:00")
public class Inventory {
  @SerializedName("capacity")
  private Integer capacity = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("slots")
  private List<Slot> slots = new ArrayList<Slot>();

  @SerializedName("totalItems")
  private Integer totalItems = null;

  @SerializedName("type")
  private CatalogTypeInventoryArchetype type = null;

  public Inventory capacity(Integer capacity) {
    this.capacity = capacity;
    return this;
  }

   /**
   * The maximum capacity of the inventory (maximum number of stacks)
   * @return capacity
  **/
  @ApiModelProperty(required = true, value = "The maximum capacity of the inventory (maximum number of stacks)")
  public Integer getCapacity() {
    return capacity;
  }

  public void setCapacity(Integer capacity) {
    this.capacity = capacity;
  }

  public Inventory name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the inventory
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of the inventory")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Inventory slots(List<Slot> slots) {
    this.slots = slots;
    return this;
  }

  public Inventory addSlotsItem(Slot slotsItem) {
    this.slots.add(slotsItem);
    return this;
  }

   /**
   * Gets a list of slots in the inventory (with their items)
   * @return slots
  **/
  @ApiModelProperty(required = true, value = "Gets a list of slots in the inventory (with their items)")
  public List<Slot> getSlots() {
    return slots;
  }

  public void setSlots(List<Slot> slots) {
    this.slots = slots;
  }

  public Inventory totalItems(Integer totalItems) {
    this.totalItems = totalItems;
    return this;
  }

   /**
   * The total amount of items currently in the inventory
   * @return totalItems
  **/
  @ApiModelProperty(required = true, value = "The total amount of items currently in the inventory")
  public Integer getTotalItems() {
    return totalItems;
  }

  public void setTotalItems(Integer totalItems) {
    this.totalItems = totalItems;
  }

  public Inventory type(CatalogTypeInventoryArchetype type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the inventory
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The type of the inventory")
  public CatalogTypeInventoryArchetype getType() {
    return type;
  }

  public void setType(CatalogTypeInventoryArchetype type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Inventory inventory = (Inventory) o;
    return Objects.equals(this.capacity, inventory.capacity) &&
        Objects.equals(this.name, inventory.name) &&
        Objects.equals(this.slots, inventory.slots) &&
        Objects.equals(this.totalItems, inventory.totalItems) &&
        Objects.equals(this.type, inventory.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacity, name, slots, totalItems, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Inventory {\n");
    
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slots: ").append(toIndentedString(slots)).append("\n");
    sb.append("    totalItems: ").append(toIndentedString(totalItems)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

