/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CatalogType;
import io.swagger.client.model.GameMode;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * UpdateWorldRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-23T13:32:53.543+02:00")
public class UpdateWorldRequest {
  @SerializedName("name")
  private String name = null;

  @SerializedName("allowCommands")
  private Boolean allowCommands = null;

  @SerializedName("difficulty")
  private CatalogType difficulty = null;

  @SerializedName("gameMode")
  private GameMode gameMode = null;

  @SerializedName("gameRules")
  private Map<String, String> gameRules = null;

  @SerializedName("generator")
  private CatalogType generator = null;

  @SerializedName("keepSpawnLoaded")
  private Boolean keepSpawnLoaded = null;

  @SerializedName("loadOnStartup")
  private Boolean loadOnStartup = null;

  @SerializedName("loaded")
  private Boolean loaded = null;

  @SerializedName("seed")
  private Long seed = null;

  @SerializedName("usesMapFeatures")
  private Boolean usesMapFeatures = null;

  public UpdateWorldRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the world
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of the world")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public UpdateWorldRequest allowCommands(Boolean allowCommands) {
    this.allowCommands = allowCommands;
    return this;
  }

   /**
   * Get allowCommands
   * @return allowCommands
  **/
  @ApiModelProperty(value = "")
  public Boolean isAllowCommands() {
    return allowCommands;
  }

  public void setAllowCommands(Boolean allowCommands) {
    this.allowCommands = allowCommands;
  }

  public UpdateWorldRequest difficulty(CatalogType difficulty) {
    this.difficulty = difficulty;
    return this;
  }

   /**
   * Which difficulty the world is set to
   * @return difficulty
  **/
  @ApiModelProperty(value = "Which difficulty the world is set to")
  public CatalogType getDifficulty() {
    return difficulty;
  }

  public void setDifficulty(CatalogType difficulty) {
    this.difficulty = difficulty;
  }

  public UpdateWorldRequest gameMode(GameMode gameMode) {
    this.gameMode = gameMode;
    return this;
  }

   /**
   * Which game mode the world defaults to
   * @return gameMode
  **/
  @ApiModelProperty(value = "Which game mode the world defaults to")
  public GameMode getGameMode() {
    return gameMode;
  }

  public void setGameMode(GameMode gameMode) {
    this.gameMode = gameMode;
  }

  public UpdateWorldRequest gameRules(Map<String, String> gameRules) {
    this.gameRules = gameRules;
    return this;
  }

  public UpdateWorldRequest putGameRulesItem(String key, String gameRulesItem) {
    if (this.gameRules == null) {
      this.gameRules = new HashMap<String, String>();
    }
    this.gameRules.put(key, gameRulesItem);
    return this;
  }

   /**
   * The game rule settings of this world
   * @return gameRules
  **/
  @ApiModelProperty(value = "The game rule settings of this world")
  public Map<String, String> getGameRules() {
    return gameRules;
  }

  public void setGameRules(Map<String, String> gameRules) {
    this.gameRules = gameRules;
  }

  public UpdateWorldRequest generator(CatalogType generator) {
    this.generator = generator;
    return this;
  }

   /**
   * Which generator to use for the world
   * @return generator
  **/
  @ApiModelProperty(value = "Which generator to use for the world")
  public CatalogType getGenerator() {
    return generator;
  }

  public void setGenerator(CatalogType generator) {
    this.generator = generator;
  }

  public UpdateWorldRequest keepSpawnLoaded(Boolean keepSpawnLoaded) {
    this.keepSpawnLoaded = keepSpawnLoaded;
    return this;
  }

   /**
   * Get keepSpawnLoaded
   * @return keepSpawnLoaded
  **/
  @ApiModelProperty(value = "")
  public Boolean isKeepSpawnLoaded() {
    return keepSpawnLoaded;
  }

  public void setKeepSpawnLoaded(Boolean keepSpawnLoaded) {
    this.keepSpawnLoaded = keepSpawnLoaded;
  }

  public UpdateWorldRequest loadOnStartup(Boolean loadOnStartup) {
    this.loadOnStartup = loadOnStartup;
    return this;
  }

   /**
   * Get loadOnStartup
   * @return loadOnStartup
  **/
  @ApiModelProperty(value = "")
  public Boolean isLoadOnStartup() {
    return loadOnStartup;
  }

  public void setLoadOnStartup(Boolean loadOnStartup) {
    this.loadOnStartup = loadOnStartup;
  }

  public UpdateWorldRequest loaded(Boolean loaded) {
    this.loaded = loaded;
    return this;
  }

   /**
   * True if the world should be loaded, false otherwise
   * @return loaded
  **/
  @ApiModelProperty(value = "True if the world should be loaded, false otherwise")
  public Boolean isLoaded() {
    return loaded;
  }

  public void setLoaded(Boolean loaded) {
    this.loaded = loaded;
  }

  public UpdateWorldRequest seed(Long seed) {
    this.seed = seed;
    return this;
  }

   /**
   * The seed of the world
   * @return seed
  **/
  @ApiModelProperty(value = "The seed of the world")
  public Long getSeed() {
    return seed;
  }

  public void setSeed(Long seed) {
    this.seed = seed;
  }

  public UpdateWorldRequest usesMapFeatures(Boolean usesMapFeatures) {
    this.usesMapFeatures = usesMapFeatures;
    return this;
  }

   /**
   * Get usesMapFeatures
   * @return usesMapFeatures
  **/
  @ApiModelProperty(value = "")
  public Boolean isUsesMapFeatures() {
    return usesMapFeatures;
  }

  public void setUsesMapFeatures(Boolean usesMapFeatures) {
    this.usesMapFeatures = usesMapFeatures;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateWorldRequest updateWorldRequest = (UpdateWorldRequest) o;
    return Objects.equals(this.name, updateWorldRequest.name) &&
        Objects.equals(this.allowCommands, updateWorldRequest.allowCommands) &&
        Objects.equals(this.difficulty, updateWorldRequest.difficulty) &&
        Objects.equals(this.gameMode, updateWorldRequest.gameMode) &&
        Objects.equals(this.gameRules, updateWorldRequest.gameRules) &&
        Objects.equals(this.generator, updateWorldRequest.generator) &&
        Objects.equals(this.keepSpawnLoaded, updateWorldRequest.keepSpawnLoaded) &&
        Objects.equals(this.loadOnStartup, updateWorldRequest.loadOnStartup) &&
        Objects.equals(this.loaded, updateWorldRequest.loaded) &&
        Objects.equals(this.seed, updateWorldRequest.seed) &&
        Objects.equals(this.usesMapFeatures, updateWorldRequest.usesMapFeatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, allowCommands, difficulty, gameMode, gameRules, generator, keepSpawnLoaded, loadOnStartup, loaded, seed, usesMapFeatures);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateWorldRequest {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    allowCommands: ").append(toIndentedString(allowCommands)).append("\n");
    sb.append("    difficulty: ").append(toIndentedString(difficulty)).append("\n");
    sb.append("    gameMode: ").append(toIndentedString(gameMode)).append("\n");
    sb.append("    gameRules: ").append(toIndentedString(gameRules)).append("\n");
    sb.append("    generator: ").append(toIndentedString(generator)).append("\n");
    sb.append("    keepSpawnLoaded: ").append(toIndentedString(keepSpawnLoaded)).append("\n");
    sb.append("    loadOnStartup: ").append(toIndentedString(loadOnStartup)).append("\n");
    sb.append("    loaded: ").append(toIndentedString(loaded)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    usesMapFeatures: ").append(toIndentedString(usesMapFeatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

