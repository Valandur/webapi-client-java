/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.PluginDependency;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * PluginContainer
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-14T13:42:56.227+02:00")
public class PluginContainer {
  @SerializedName("authors")
  private List<String> authors = new ArrayList<String>();

  @SerializedName("dependencies")
  private List<PluginDependency> dependencies = new ArrayList<PluginDependency>();

  @SerializedName("id")
  private String id = null;

  @SerializedName("link")
  private String link = null;

  @SerializedName("name")
  private String name = null;

  /**
   * The current loaded state of the plugin
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    LOADED("Loaded"),
    
    UNLOADED("Unloaded"),
    
    WILLBELOADED("WillBeLoaded"),
    
    WILLBEUNLOADED("WillBeUnloaded");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  /**
   * The type of the plugin
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNKNOWN("Unknown"),
    
    SPONGE("Sponge"),
    
    FORGE("Forge"),
    
    MINECRAFT("Minecraft");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("source")
  private String source = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("version")
  private String version = null;

  public PluginContainer authors(List<String> authors) {
    this.authors = authors;
    return this;
  }

  public PluginContainer addAuthorsItem(String authorsItem) {
    this.authors.add(authorsItem);
    return this;
  }

   /**
   * A list of authors that created this plugin
   * @return authors
  **/
  @ApiModelProperty(required = true, value = "A list of authors that created this plugin")
  public List<String> getAuthors() {
    return authors;
  }

  public void setAuthors(List<String> authors) {
    this.authors = authors;
  }

  public PluginContainer dependencies(List<PluginDependency> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public PluginContainer addDependenciesItem(PluginDependency dependenciesItem) {
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * Other plugins that this plugin depends on
   * @return dependencies
  **/
  @ApiModelProperty(required = true, value = "Other plugins that this plugin depends on")
  public List<PluginDependency> getDependencies() {
    return dependencies;
  }

  public void setDependencies(List<PluginDependency> dependencies) {
    this.dependencies = dependencies;
  }

  public PluginContainer id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique id of this plugin
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The unique id of this plugin")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

   /**
   * The API link that can be used to obtain more information about this object
   * @return link
  **/
  @ApiModelProperty(required = true, value = "The API link that can be used to obtain more information about this object")
  public String getLink() {
    return link;
  }

  public PluginContainer name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of this plugin
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of this plugin")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PluginContainer state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The current loaded state of the plugin
   * @return state
  **/
  @ApiModelProperty(required = true, value = "The current loaded state of the plugin")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public PluginContainer type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the plugin
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The type of the plugin")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public PluginContainer description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description describing what this plugin does (hopefully)
   * @return description
  **/
  @ApiModelProperty(value = "A description describing what this plugin does (hopefully)")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PluginContainer source(String source) {
    this.source = source;
    return this;
  }

   /**
   * The file source where the plugin was loaded from.
   * @return source
  **/
  @ApiModelProperty(value = "The file source where the plugin was loaded from.")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public PluginContainer url(String url) {
    this.url = url;
    return this;
  }

   /**
   * The url that was added to the plugin (probably the homepage)
   * @return url
  **/
  @ApiModelProperty(value = "The url that was added to the plugin (probably the homepage)")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public PluginContainer version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The current version of the plugin
   * @return version
  **/
  @ApiModelProperty(value = "The current version of the plugin")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginContainer pluginContainer = (PluginContainer) o;
    return Objects.equals(this.authors, pluginContainer.authors) &&
        Objects.equals(this.dependencies, pluginContainer.dependencies) &&
        Objects.equals(this.id, pluginContainer.id) &&
        Objects.equals(this.link, pluginContainer.link) &&
        Objects.equals(this.name, pluginContainer.name) &&
        Objects.equals(this.state, pluginContainer.state) &&
        Objects.equals(this.type, pluginContainer.type) &&
        Objects.equals(this.description, pluginContainer.description) &&
        Objects.equals(this.source, pluginContainer.source) &&
        Objects.equals(this.url, pluginContainer.url) &&
        Objects.equals(this.version, pluginContainer.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authors, dependencies, id, link, name, state, type, description, source, url, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginContainer {\n");
    
    sb.append("    authors: ").append(toIndentedString(authors)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

