/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.InteractiveMessageOption;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * InteractiveMessage
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-13T12:26:34.036+02:00")
public class InteractiveMessage {
  @SerializedName("id")
  private String id = null;

  @SerializedName("link")
  private String link = null;

  @SerializedName("target")
  private String target = null;

  @SerializedName("uuid")
  private UUID uuid = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("once")
  private Boolean once = null;

  @SerializedName("options")
  private List<InteractiveMessageOption> options = null;

  @SerializedName("targets")
  private List<String> targets = null;

  public InteractiveMessage id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the message. Used to identify responses.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The id of the message. Used to identify responses.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

   /**
   * The API link that can be used to obtain more information about this object
   * @return link
  **/
  @ApiModelProperty(required = true, value = "The API link that can be used to obtain more information about this object")
  public String getLink() {
    return link;
  }

  public InteractiveMessage target(String target) {
    this.target = target;
    return this;
  }

   /**
   * The target of the message, usually this is a player UUID. Can be set to \&quot;server\&quot; to send to all online players.
   * @return target
  **/
  @ApiModelProperty(required = true, value = "The target of the message, usually this is a player UUID. Can be set to \"server\" to send to all online players.")
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }

  public InteractiveMessage uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The unique UUID of this message
   * @return uuid
  **/
  @ApiModelProperty(required = true, value = "The unique UUID of this message")
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }

  public InteractiveMessage message(String message) {
    this.message = message;
    return this;
  }

   /**
   * The actual content of the message
   * @return message
  **/
  @ApiModelProperty(value = "The actual content of the message")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public InteractiveMessage once(Boolean once) {
    this.once = once;
    return this;
  }

   /**
   * True if this message can only be replied to once per target, false otherwise
   * @return once
  **/
  @ApiModelProperty(value = "True if this message can only be replied to once per target, false otherwise")
  public Boolean isOnce() {
    return once;
  }

  public void setOnce(Boolean once) {
    this.once = once;
  }

  public InteractiveMessage options(List<InteractiveMessageOption> options) {
    this.options = options;
    return this;
  }

  public InteractiveMessage addOptionsItem(InteractiveMessageOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<InteractiveMessageOption>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Clickable options that the player can select from
   * @return options
  **/
  @ApiModelProperty(value = "Clickable options that the player can select from")
  public List<InteractiveMessageOption> getOptions() {
    return options;
  }

  public void setOptions(List<InteractiveMessageOption> options) {
    this.options = options;
  }

  public InteractiveMessage targets(List<String> targets) {
    this.targets = targets;
    return this;
  }

  public InteractiveMessage addTargetsItem(String targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<String>();
    }
    this.targets.add(targetsItem);
    return this;
  }

   /**
   * A list of targets that will receive the message. Usually a list of player UUIDs
   * @return targets
  **/
  @ApiModelProperty(value = "A list of targets that will receive the message. Usually a list of player UUIDs")
  public List<String> getTargets() {
    return targets;
  }

  public void setTargets(List<String> targets) {
    this.targets = targets;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InteractiveMessage interactiveMessage = (InteractiveMessage) o;
    return Objects.equals(this.id, interactiveMessage.id) &&
        Objects.equals(this.link, interactiveMessage.link) &&
        Objects.equals(this.target, interactiveMessage.target) &&
        Objects.equals(this.uuid, interactiveMessage.uuid) &&
        Objects.equals(this.message, interactiveMessage.message) &&
        Objects.equals(this.once, interactiveMessage.once) &&
        Objects.equals(this.options, interactiveMessage.options) &&
        Objects.equals(this.targets, interactiveMessage.targets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, link, target, uuid, message, once, options, targets);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InteractiveMessage {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    once: ").append(toIndentedString(once)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

