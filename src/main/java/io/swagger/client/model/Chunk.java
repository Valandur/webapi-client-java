/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Vector3i;
import io.swagger.client.model.World;
import java.io.IOException;
import java.util.UUID;

/**
 * Chunk
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-14T13:42:56.227+02:00")
public class Chunk {
  @SerializedName("link")
  private String link = null;

  @SerializedName("loaded")
  private Boolean loaded = null;

  @SerializedName("position")
  private Vector3i position = null;

  @SerializedName("uuid")
  private UUID uuid = null;

  @SerializedName("blockMax")
  private Vector3i blockMax = null;

  @SerializedName("blockMin")
  private Vector3i blockMin = null;

  @SerializedName("inhabitedTime")
  private Integer inhabitedTime = null;

  @SerializedName("regionalDifficultyFactor")
  private Double regionalDifficultyFactor = null;

  @SerializedName("regionalDifficultyPercentage")
  private Double regionalDifficultyPercentage = null;

  @SerializedName("world")
  private World world = null;

   /**
   * The API link that can be used to obtain more information about this object
   * @return link
  **/
  @ApiModelProperty(required = true, value = "The API link that can be used to obtain more information about this object")
  public String getLink() {
    return link;
  }

  public Chunk loaded(Boolean loaded) {
    this.loaded = loaded;
    return this;
  }

   /**
   * True if this chunk is currently loaded, false otherwise
   * @return loaded
  **/
  @ApiModelProperty(required = true, value = "True if this chunk is currently loaded, false otherwise")
  public Boolean isLoaded() {
    return loaded;
  }

  public void setLoaded(Boolean loaded) {
    this.loaded = loaded;
  }

  public Chunk position(Vector3i position) {
    this.position = position;
    return this;
  }

   /**
   * The position of this chunk (in chunk coordinates)
   * @return position
  **/
  @ApiModelProperty(required = true, value = "The position of this chunk (in chunk coordinates)")
  public Vector3i getPosition() {
    return position;
  }

  public void setPosition(Vector3i position) {
    this.position = position;
  }

  public Chunk uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The unique id of this chunk
   * @return uuid
  **/
  @ApiModelProperty(required = true, value = "The unique id of this chunk")
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }

  public Chunk blockMax(Vector3i blockMax) {
    this.blockMax = blockMax;
    return this;
  }

   /**
   * The bock with the largest coordinates that is still part of this chunk
   * @return blockMax
  **/
  @ApiModelProperty(value = "The bock with the largest coordinates that is still part of this chunk")
  public Vector3i getBlockMax() {
    return blockMax;
  }

  public void setBlockMax(Vector3i blockMax) {
    this.blockMax = blockMax;
  }

  public Chunk blockMin(Vector3i blockMin) {
    this.blockMin = blockMin;
    return this;
  }

   /**
   * The bock with the smallest coordinates that is still part of this chunk
   * @return blockMin
  **/
  @ApiModelProperty(value = "The bock with the smallest coordinates that is still part of this chunk")
  public Vector3i getBlockMin() {
    return blockMin;
  }

  public void setBlockMin(Vector3i blockMin) {
    this.blockMin = blockMin;
  }

  public Chunk inhabitedTime(Integer inhabitedTime) {
    this.inhabitedTime = inhabitedTime;
    return this;
  }

   /**
   * The total amount of time (in server ticks) this chunk has been inhabited by players.
   * @return inhabitedTime
  **/
  @ApiModelProperty(value = "The total amount of time (in server ticks) this chunk has been inhabited by players.")
  public Integer getInhabitedTime() {
    return inhabitedTime;
  }

  public void setInhabitedTime(Integer inhabitedTime) {
    this.inhabitedTime = inhabitedTime;
  }

  public Chunk regionalDifficultyFactor(Double regionalDifficultyFactor) {
    this.regionalDifficultyFactor = regionalDifficultyFactor;
    return this;
  }

   /**
   * The increase in difficulty due to the presence of players in the chunk
   * @return regionalDifficultyFactor
  **/
  @ApiModelProperty(value = "The increase in difficulty due to the presence of players in the chunk")
  public Double getRegionalDifficultyFactor() {
    return regionalDifficultyFactor;
  }

  public void setRegionalDifficultyFactor(Double regionalDifficultyFactor) {
    this.regionalDifficultyFactor = regionalDifficultyFactor;
  }

  public Chunk regionalDifficultyPercentage(Double regionalDifficultyPercentage) {
    this.regionalDifficultyPercentage = regionalDifficultyPercentage;
    return this;
  }

   /**
   * The increase in difficulty due to the presence of players in the chunk as a percentage
   * @return regionalDifficultyPercentage
  **/
  @ApiModelProperty(value = "The increase in difficulty due to the presence of players in the chunk as a percentage")
  public Double getRegionalDifficultyPercentage() {
    return regionalDifficultyPercentage;
  }

  public void setRegionalDifficultyPercentage(Double regionalDifficultyPercentage) {
    this.regionalDifficultyPercentage = regionalDifficultyPercentage;
  }

  public Chunk world(World world) {
    this.world = world;
    return this;
  }

   /**
   * The world the chunk is in
   * @return world
  **/
  @ApiModelProperty(value = "The world the chunk is in")
  public World getWorld() {
    return world;
  }

  public void setWorld(World world) {
    this.world = world;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Chunk chunk = (Chunk) o;
    return Objects.equals(this.link, chunk.link) &&
        Objects.equals(this.loaded, chunk.loaded) &&
        Objects.equals(this.position, chunk.position) &&
        Objects.equals(this.uuid, chunk.uuid) &&
        Objects.equals(this.blockMax, chunk.blockMax) &&
        Objects.equals(this.blockMin, chunk.blockMin) &&
        Objects.equals(this.inhabitedTime, chunk.inhabitedTime) &&
        Objects.equals(this.regionalDifficultyFactor, chunk.regionalDifficultyFactor) &&
        Objects.equals(this.regionalDifficultyPercentage, chunk.regionalDifficultyPercentage) &&
        Objects.equals(this.world, chunk.world);
  }

  @Override
  public int hashCode() {
    return Objects.hash(link, loaded, position, uuid, blockMax, blockMin, inhabitedTime, regionalDifficultyFactor, regionalDifficultyPercentage, world);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Chunk {\n");
    
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    loaded: ").append(toIndentedString(loaded)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    blockMax: ").append(toIndentedString(blockMax)).append("\n");
    sb.append("    blockMin: ").append(toIndentedString(blockMin)).append("\n");
    sb.append("    inhabitedTime: ").append(toIndentedString(inhabitedTime)).append("\n");
    sb.append("    regionalDifficultyFactor: ").append(toIndentedString(regionalDifficultyFactor)).append("\n");
    sb.append("    regionalDifficultyPercentage: ").append(toIndentedString(regionalDifficultyPercentage)).append("\n");
    sb.append("    world: ").append(toIndentedString(world)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

