/*
 * WebAPI
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * A parameter that is interpreted by the server and passed to the method.
 */
@ApiModel(description = "A parameter that is interpreted by the server and passed to the method.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-12-10T13:08:53.752+01:00")
public class RawRequestParam {
  /**
   * The type of the parameter. This defines how the value is interpreted.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INT("int"),
    
    INTEGER("integer"),
    
    FLOAT("float"),
    
    DOUBLE("double"),
    
    BOOL("bool"),
    
    BOOLEAN("boolean"),
    
    BYTE("byte"),
    
    CHAR("char"),
    
    LONG("long"),
    
    SHORT("short"),
    
    STRING("string"),
    
    ENUM("enum"),
    
    CLASS("class"),
    
    VECTOR3D("vector3d"),
    
    VECTOR3I("vector3i"),
    
    TEXT("text"),
    
    WORLD("world"),
    
    PLAYER("player"),
    
    ITEMSTACK("itemstack");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("value")
  private Object value = null;

  @SerializedName("optional")
  private Boolean optional = null;

  public RawRequestParam type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the parameter. This defines how the value is interpreted.
   * @return type
  **/
  @ApiModelProperty(value = "The type of the parameter. This defines how the value is interpreted.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public RawRequestParam value(Object value) {
    this.value = value;
    return this;
  }

   /**
   * The value of the parameter. Base types (like integer, float, boolean, etc.) are converted to the correct type and then passed to the method. Some parameters are handled differently, they are listed below along with their usage:  - class: Interpreted as the fully qualified classname of a class which is loaded and passed | - vector3(i/d): Converted to a Vector3(i/d) object. Requires the properties \&quot;x\&quot;, \&quot;y\&quot; and \&quot;z\&quot; - text: Converted to a sponge text - world: Assumed to be the UUID of a world which is fetched and passed - player: Assumed to be the UUID of the player which is fetched and passed. - itemstack: Converted to a new item stack. Requires the properties \&quot;itemType\&quot; and \&quot;amount\&quot; 
   * @return value
  **/
  @ApiModelProperty(value = "The value of the parameter. Base types (like integer, float, boolean, etc.) are converted to the correct type and then passed to the method. Some parameters are handled differently, they are listed below along with their usage:  - class: Interpreted as the fully qualified classname of a class which is loaded and passed | - vector3(i/d): Converted to a Vector3(i/d) object. Requires the properties \"x\", \"y\" and \"z\" - text: Converted to a sponge text - world: Assumed to be the UUID of a world which is fetched and passed - player: Assumed to be the UUID of the player which is fetched and passed. - itemstack: Converted to a new item stack. Requires the properties \"itemType\" and \"amount\" ")
  public Object getValue() {
    return value;
  }

  public void setValue(Object value) {
    this.value = value;
  }

  public RawRequestParam optional(Boolean optional) {
    this.optional = optional;
    return this;
  }

   /**
   * True if the value should be wrapped into an optional value, false otherwise.
   * @return optional
  **/
  @ApiModelProperty(value = "True if the value should be wrapped into an optional value, false otherwise.")
  public Boolean getOptional() {
    return optional;
  }

  public void setOptional(Boolean optional) {
    this.optional = optional;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RawRequestParam rawRequestParam = (RawRequestParam) o;
    return Objects.equals(this.type, rawRequestParam.type) &&
        Objects.equals(this.value, rawRequestParam.value) &&
        Objects.equals(this.optional, rawRequestParam.optional);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, value, optional);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RawRequestParam {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

