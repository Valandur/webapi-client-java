/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PluginDependency
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-23T12:56:27.838+02:00")
public class PluginDependency {
  @SerializedName("id")
  private String id = null;

  /**
   * The load order of the original plugin in relation to the dependency
   */
  @JsonAdapter(LoadOrderEnum.Adapter.class)
  public enum LoadOrderEnum {
    NONE("NONE"),
    
    BEFORE("BEFORE"),
    
    AFTER("AFTER");

    private String value;

    LoadOrderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoadOrderEnum fromValue(String text) {
      for (LoadOrderEnum b : LoadOrderEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LoadOrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoadOrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoadOrderEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LoadOrderEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("loadOrder")
  private LoadOrderEnum loadOrder = null;

  @SerializedName("optional")
  private Boolean optional = null;

  @SerializedName("version")
  private String version = null;

  public PluginDependency id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the plugin that the original plugin depends on
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The id of the plugin that the original plugin depends on")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PluginDependency loadOrder(LoadOrderEnum loadOrder) {
    this.loadOrder = loadOrder;
    return this;
  }

   /**
   * The load order of the original plugin in relation to the dependency
   * @return loadOrder
  **/
  @ApiModelProperty(required = true, value = "The load order of the original plugin in relation to the dependency")
  public LoadOrderEnum getLoadOrder() {
    return loadOrder;
  }

  public void setLoadOrder(LoadOrderEnum loadOrder) {
    this.loadOrder = loadOrder;
  }

  public PluginDependency optional(Boolean optional) {
    this.optional = optional;
    return this;
  }

   /**
   * True if this is an optional dependency, false otherwise
   * @return optional
  **/
  @ApiModelProperty(required = true, value = "True if this is an optional dependency, false otherwise")
  public Boolean isOptional() {
    return optional;
  }

  public void setOptional(Boolean optional) {
    this.optional = optional;
  }

  public PluginDependency version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the plugin that the original plugin depends on
   * @return version
  **/
  @ApiModelProperty(required = true, value = "The version of the plugin that the original plugin depends on")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginDependency pluginDependency = (PluginDependency) o;
    return Objects.equals(this.id, pluginDependency.id) &&
        Objects.equals(this.loadOrder, pluginDependency.loadOrder) &&
        Objects.equals(this.optional, pluginDependency.optional) &&
        Objects.equals(this.version, pluginDependency.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, loadOrder, optional, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginDependency {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    loadOrder: ").append(toIndentedString(loadOrder)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

