/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.PluginContainer;
import java.io.IOException;

/**
 * ServerInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-14T13:42:56.227+02:00")
public class ServerInfo {
  @SerializedName("api")
  private PluginContainer api = null;

  @SerializedName("game")
  private PluginContainer game = null;

  @SerializedName("hasWhitelist")
  private Boolean hasWhitelist = null;

  @SerializedName("implementation")
  private PluginContainer implementation = null;

  @SerializedName("maxPlayers")
  private Integer maxPlayers = null;

  @SerializedName("minecraftVersion")
  private String minecraftVersion = null;

  @SerializedName("motd")
  private String motd = null;

  @SerializedName("onlineMode")
  private Boolean onlineMode = null;

  @SerializedName("players")
  private Integer players = null;

  @SerializedName("tps")
  private Double tps = null;

  @SerializedName("uptimeTicks")
  private Integer uptimeTicks = null;

  @SerializedName("address")
  private String address = null;

  @SerializedName("resourcePack")
  private String resourcePack = null;

  public ServerInfo api(PluginContainer api) {
    this.api = api;
    return this;
  }

   /**
   * Get api
   * @return api
  **/
  @ApiModelProperty(required = true, value = "")
  public PluginContainer getApi() {
    return api;
  }

  public void setApi(PluginContainer api) {
    this.api = api;
  }

  public ServerInfo game(PluginContainer game) {
    this.game = game;
    return this;
  }

   /**
   * Get game
   * @return game
  **/
  @ApiModelProperty(required = true, value = "")
  public PluginContainer getGame() {
    return game;
  }

  public void setGame(PluginContainer game) {
    this.game = game;
  }

  public ServerInfo hasWhitelist(Boolean hasWhitelist) {
    this.hasWhitelist = hasWhitelist;
    return this;
  }

   /**
   * True if the server has activated the whitelist, false otherwise
   * @return hasWhitelist
  **/
  @ApiModelProperty(required = true, value = "True if the server has activated the whitelist, false otherwise")
  public Boolean isHasWhitelist() {
    return hasWhitelist;
  }

  public void setHasWhitelist(Boolean hasWhitelist) {
    this.hasWhitelist = hasWhitelist;
  }

  public ServerInfo implementation(PluginContainer implementation) {
    this.implementation = implementation;
    return this;
  }

   /**
   * Get implementation
   * @return implementation
  **/
  @ApiModelProperty(required = true, value = "")
  public PluginContainer getImplementation() {
    return implementation;
  }

  public void setImplementation(PluginContainer implementation) {
    this.implementation = implementation;
  }

  public ServerInfo maxPlayers(Integer maxPlayers) {
    this.maxPlayers = maxPlayers;
    return this;
  }

   /**
   * The maximum amount of players allowed on the server
   * @return maxPlayers
  **/
  @ApiModelProperty(required = true, value = "The maximum amount of players allowed on the server")
  public Integer getMaxPlayers() {
    return maxPlayers;
  }

  public void setMaxPlayers(Integer maxPlayers) {
    this.maxPlayers = maxPlayers;
  }

  public ServerInfo minecraftVersion(String minecraftVersion) {
    this.minecraftVersion = minecraftVersion;
    return this;
  }

   /**
   * The Minecraft version running on the server
   * @return minecraftVersion
  **/
  @ApiModelProperty(required = true, value = "The Minecraft version running on the server")
  public String getMinecraftVersion() {
    return minecraftVersion;
  }

  public void setMinecraftVersion(String minecraftVersion) {
    this.minecraftVersion = minecraftVersion;
  }

  public ServerInfo motd(String motd) {
    this.motd = motd;
    return this;
  }

   /**
   * The message of the day set on the server
   * @return motd
  **/
  @ApiModelProperty(required = true, value = "The message of the day set on the server")
  public String getMotd() {
    return motd;
  }

  public void setMotd(String motd) {
    this.motd = motd;
  }

  public ServerInfo onlineMode(Boolean onlineMode) {
    this.onlineMode = onlineMode;
    return this;
  }

   /**
   * True if the server is in online mode and verifies connections, false otherwise
   * @return onlineMode
  **/
  @ApiModelProperty(required = true, value = "True if the server is in online mode and verifies connections, false otherwise")
  public Boolean isOnlineMode() {
    return onlineMode;
  }

  public void setOnlineMode(Boolean onlineMode) {
    this.onlineMode = onlineMode;
  }

  public ServerInfo players(Integer players) {
    this.players = players;
    return this;
  }

   /**
   * The amount of players currently playing on the server
   * @return players
  **/
  @ApiModelProperty(required = true, value = "The amount of players currently playing on the server")
  public Integer getPlayers() {
    return players;
  }

  public void setPlayers(Integer players) {
    this.players = players;
  }

  public ServerInfo tps(Double tps) {
    this.tps = tps;
    return this;
  }

   /**
   * The average ticks per second the server is running with
   * @return tps
  **/
  @ApiModelProperty(required = true, value = "The average ticks per second the server is running with")
  public Double getTps() {
    return tps;
  }

  public void setTps(Double tps) {
    this.tps = tps;
  }

  public ServerInfo uptimeTicks(Integer uptimeTicks) {
    this.uptimeTicks = uptimeTicks;
    return this;
  }

   /**
   * The number of ticks the server has been running
   * @return uptimeTicks
  **/
  @ApiModelProperty(required = true, value = "The number of ticks the server has been running")
  public Integer getUptimeTicks() {
    return uptimeTicks;
  }

  public void setUptimeTicks(Integer uptimeTicks) {
    this.uptimeTicks = uptimeTicks;
  }

  public ServerInfo address(String address) {
    this.address = address;
    return this;
  }

   /**
   * The address that the server is bound to
   * @return address
  **/
  @ApiModelProperty(value = "The address that the server is bound to")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public ServerInfo resourcePack(String resourcePack) {
    this.resourcePack = resourcePack;
    return this;
  }

   /**
   * The name of the resource pack this is used on the server
   * @return resourcePack
  **/
  @ApiModelProperty(value = "The name of the resource pack this is used on the server")
  public String getResourcePack() {
    return resourcePack;
  }

  public void setResourcePack(String resourcePack) {
    this.resourcePack = resourcePack;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerInfo serverInfo = (ServerInfo) o;
    return Objects.equals(this.api, serverInfo.api) &&
        Objects.equals(this.game, serverInfo.game) &&
        Objects.equals(this.hasWhitelist, serverInfo.hasWhitelist) &&
        Objects.equals(this.implementation, serverInfo.implementation) &&
        Objects.equals(this.maxPlayers, serverInfo.maxPlayers) &&
        Objects.equals(this.minecraftVersion, serverInfo.minecraftVersion) &&
        Objects.equals(this.motd, serverInfo.motd) &&
        Objects.equals(this.onlineMode, serverInfo.onlineMode) &&
        Objects.equals(this.players, serverInfo.players) &&
        Objects.equals(this.tps, serverInfo.tps) &&
        Objects.equals(this.uptimeTicks, serverInfo.uptimeTicks) &&
        Objects.equals(this.address, serverInfo.address) &&
        Objects.equals(this.resourcePack, serverInfo.resourcePack);
  }

  @Override
  public int hashCode() {
    return Objects.hash(api, game, hasWhitelist, implementation, maxPlayers, minecraftVersion, motd, onlineMode, players, tps, uptimeTicks, address, resourcePack);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerInfo {\n");
    
    sb.append("    api: ").append(toIndentedString(api)).append("\n");
    sb.append("    game: ").append(toIndentedString(game)).append("\n");
    sb.append("    hasWhitelist: ").append(toIndentedString(hasWhitelist)).append("\n");
    sb.append("    implementation: ").append(toIndentedString(implementation)).append("\n");
    sb.append("    maxPlayers: ").append(toIndentedString(maxPlayers)).append("\n");
    sb.append("    minecraftVersion: ").append(toIndentedString(minecraftVersion)).append("\n");
    sb.append("    motd: ").append(toIndentedString(motd)).append("\n");
    sb.append("    onlineMode: ").append(toIndentedString(onlineMode)).append("\n");
    sb.append("    players: ").append(toIndentedString(players)).append("\n");
    sb.append("    tps: ").append(toIndentedString(tps)).append("\n");
    sb.append("    uptimeTicks: ").append(toIndentedString(uptimeTicks)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    resourcePack: ").append(toIndentedString(resourcePack)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

