/*
 * WebAPI
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Location;
import io.swagger.client.model.MMCTicket;
import io.swagger.client.model.Player;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * MMCTicketFull
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-09T21:04:49.224+02:00")
public class MMCTicketFull {
  @SerializedName("id")
  private String id = null;

  @SerializedName("timestamp")
  private BigDecimal timestamp = null;

  @SerializedName("sender")
  private Player sender = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("comment")
  private String comment = null;

  /**
   * The current state of the ticket.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OPEN("Open"),
    
    CLAIMED("Claimed"),
    
    HELD("Held"),
    
    CLOSED("Closed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("staff")
  private Player staff = null;

  @SerializedName("notified")
  private BigDecimal notified = null;

  @SerializedName("location")
  private Location location = null;

  public MMCTicketFull id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the crate.
   * @return id
  **/
  @ApiModelProperty(value = "The id of the crate.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public MMCTicketFull timestamp(BigDecimal timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The name of the crate.
   * @return timestamp
  **/
  @ApiModelProperty(value = "The name of the crate.")
  public BigDecimal getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(BigDecimal timestamp) {
    this.timestamp = timestamp;
  }

  public MMCTicketFull sender(Player sender) {
    this.sender = sender;
    return this;
  }

   /**
   * Get sender
   * @return sender
  **/
  @ApiModelProperty(value = "")
  public Player getSender() {
    return sender;
  }

  public void setSender(Player sender) {
    this.sender = sender;
  }

  public MMCTicketFull message(String message) {
    this.message = message;
    return this;
  }

   /**
   * The message that the player sent in the ticket.
   * @return message
  **/
  @ApiModelProperty(value = "The message that the player sent in the ticket.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public MMCTicketFull comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * The comment added by staff.
   * @return comment
  **/
  @ApiModelProperty(value = "The comment added by staff.")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public MMCTicketFull status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The current state of the ticket.
   * @return status
  **/
  @ApiModelProperty(value = "The current state of the ticket.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public MMCTicketFull staff(Player staff) {
    this.staff = staff;
    return this;
  }

   /**
   * Get staff
   * @return staff
  **/
  @ApiModelProperty(value = "")
  public Player getStaff() {
    return staff;
  }

  public void setStaff(Player staff) {
    this.staff = staff;
  }

  public MMCTicketFull notified(BigDecimal notified) {
    this.notified = notified;
    return this;
  }

   /**
   * 0 if the assigned member has not been notified yet, 1 otherwise.
   * @return notified
  **/
  @ApiModelProperty(value = "0 if the assigned member has not been notified yet, 1 otherwise.")
  public BigDecimal getNotified() {
    return notified;
  }

  public void setNotified(BigDecimal notified) {
    this.notified = notified;
  }

  public MMCTicketFull location(Location location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @ApiModelProperty(value = "")
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MMCTicketFull mmCTicketFull = (MMCTicketFull) o;
    return Objects.equals(this.id, mmCTicketFull.id) &&
        Objects.equals(this.timestamp, mmCTicketFull.timestamp) &&
        Objects.equals(this.sender, mmCTicketFull.sender) &&
        Objects.equals(this.message, mmCTicketFull.message) &&
        Objects.equals(this.comment, mmCTicketFull.comment) &&
        Objects.equals(this.status, mmCTicketFull.status) &&
        Objects.equals(this.staff, mmCTicketFull.staff) &&
        Objects.equals(this.notified, mmCTicketFull.notified) &&
        Objects.equals(this.location, mmCTicketFull.location);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, timestamp, sender, message, comment, status, staff, notified, location);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MMCTicketFull {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    staff: ").append(toIndentedString(staff)).append("\n");
    sb.append("    notified: ").append(toIndentedString(notified)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

