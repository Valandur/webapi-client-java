/*
 * WebAPI
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Inventory;
import io.swagger.client.model.Location;
import io.swagger.client.model.Player;
import io.swagger.client.model.PlayerFullAchievements;
import io.swagger.client.model.PlayerFullArmour;
import io.swagger.client.model.PlayerFullConnection;
import io.swagger.client.model.PlayerFullExperience;
import io.swagger.client.model.PlayerFullFood;
import io.swagger.client.model.PlayerFullHealth;
import io.swagger.client.model.PlayerFullJoined;
import io.swagger.client.model.Vector3;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * PlayerFull
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-01-17T22:13:43.947+01:00")
public class PlayerFull {
  @SerializedName("type")
  private String type = null;

  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("online")
  private Boolean online = null;

  @SerializedName("location")
  private Location location = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("link")
  private String link = null;

  @SerializedName("class")
  private String propertyClass = null;

  @SerializedName("velocity")
  private Vector3 velocity = null;

  @SerializedName("rotation")
  private Vector3 rotation = null;

  @SerializedName("scale")
  private Vector3 scale = null;

  @SerializedName("inventory")
  private Inventory inventory = null;

  @SerializedName("connection")
  private PlayerFullConnection connection = null;

  @SerializedName("armour")
  private PlayerFullArmour armour = null;

  @SerializedName("achievements")
  private List<PlayerFullAchievements> achievements = null;

  @SerializedName("experience")
  private PlayerFullExperience experience = null;

  @SerializedName("gameMode")
  private String gameMode = null;

  @SerializedName("joined")
  private PlayerFullJoined joined = null;

  @SerializedName("health")
  private PlayerFullHealth health = null;

  @SerializedName("food")
  private PlayerFullFood food = null;

  @SerializedName("statistics")
  private Object statistics = null;

  public PlayerFull type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of player, usually &#x60;minecraft:player&#x60;
   * @return type
  **/
  @ApiModelProperty(value = "The type of player, usually `minecraft:player`")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public PlayerFull uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The unique identifier of the player.
   * @return uuid
  **/
  @ApiModelProperty(value = "The unique identifier of the player.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public PlayerFull online(Boolean online) {
    this.online = online;
    return this;
  }

   /**
   * True if the player is currently online, false otherwise.
   * @return online
  **/
  @ApiModelProperty(value = "True if the player is currently online, false otherwise.")
  public Boolean getOnline() {
    return online;
  }

  public void setOnline(Boolean online) {
    this.online = online;
  }

  public PlayerFull location(Location location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @ApiModelProperty(value = "")
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }

  public PlayerFull name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the player.
   * @return name
  **/
  @ApiModelProperty(value = "The name of the player.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PlayerFull link(String link) {
    this.link = link;
    return this;
  }

   /**
   * The API URL which contains detailed information about this player.
   * @return link
  **/
  @ApiModelProperty(value = "The API URL which contains detailed information about this player.")
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }

  public PlayerFull propertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

   /**
   * The fully qualified class name of the object representing the player. Usually &#x60;net.minecraft.entity.player.EntityPlayerMP&#x60;.
   * @return propertyClass
  **/
  @ApiModelProperty(value = "The fully qualified class name of the object representing the player. Usually `net.minecraft.entity.player.EntityPlayerMP`.")
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }

  public PlayerFull velocity(Vector3 velocity) {
    this.velocity = velocity;
    return this;
  }

   /**
   * Get velocity
   * @return velocity
  **/
  @ApiModelProperty(value = "")
  public Vector3 getVelocity() {
    return velocity;
  }

  public void setVelocity(Vector3 velocity) {
    this.velocity = velocity;
  }

  public PlayerFull rotation(Vector3 rotation) {
    this.rotation = rotation;
    return this;
  }

   /**
   * Get rotation
   * @return rotation
  **/
  @ApiModelProperty(value = "")
  public Vector3 getRotation() {
    return rotation;
  }

  public void setRotation(Vector3 rotation) {
    this.rotation = rotation;
  }

  public PlayerFull scale(Vector3 scale) {
    this.scale = scale;
    return this;
  }

   /**
   * Get scale
   * @return scale
  **/
  @ApiModelProperty(value = "")
  public Vector3 getScale() {
    return scale;
  }

  public void setScale(Vector3 scale) {
    this.scale = scale;
  }

  public PlayerFull inventory(Inventory inventory) {
    this.inventory = inventory;
    return this;
  }

   /**
   * Get inventory
   * @return inventory
  **/
  @ApiModelProperty(value = "")
  public Inventory getInventory() {
    return inventory;
  }

  public void setInventory(Inventory inventory) {
    this.inventory = inventory;
  }

  public PlayerFull connection(PlayerFullConnection connection) {
    this.connection = connection;
    return this;
  }

   /**
   * Get connection
   * @return connection
  **/
  @ApiModelProperty(value = "")
  public PlayerFullConnection getConnection() {
    return connection;
  }

  public void setConnection(PlayerFullConnection connection) {
    this.connection = connection;
  }

  public PlayerFull armour(PlayerFullArmour armour) {
    this.armour = armour;
    return this;
  }

   /**
   * Get armour
   * @return armour
  **/
  @ApiModelProperty(value = "")
  public PlayerFullArmour getArmour() {
    return armour;
  }

  public void setArmour(PlayerFullArmour armour) {
    this.armour = armour;
  }

  public PlayerFull achievements(List<PlayerFullAchievements> achievements) {
    this.achievements = achievements;
    return this;
  }

  public PlayerFull addAchievementsItem(PlayerFullAchievements achievementsItem) {
    if (this.achievements == null) {
      this.achievements = new ArrayList<PlayerFullAchievements>();
    }
    this.achievements.add(achievementsItem);
    return this;
  }

   /**
   * An array of achievements the player has been awarded.
   * @return achievements
  **/
  @ApiModelProperty(value = "An array of achievements the player has been awarded.")
  public List<PlayerFullAchievements> getAchievements() {
    return achievements;
  }

  public void setAchievements(List<PlayerFullAchievements> achievements) {
    this.achievements = achievements;
  }

  public PlayerFull experience(PlayerFullExperience experience) {
    this.experience = experience;
    return this;
  }

   /**
   * Get experience
   * @return experience
  **/
  @ApiModelProperty(value = "")
  public PlayerFullExperience getExperience() {
    return experience;
  }

  public void setExperience(PlayerFullExperience experience) {
    this.experience = experience;
  }

  public PlayerFull gameMode(String gameMode) {
    this.gameMode = gameMode;
    return this;
  }

   /**
   * The current game mode the player is in.
   * @return gameMode
  **/
  @ApiModelProperty(value = "The current game mode the player is in.")
  public String getGameMode() {
    return gameMode;
  }

  public void setGameMode(String gameMode) {
    this.gameMode = gameMode;
  }

  public PlayerFull joined(PlayerFullJoined joined) {
    this.joined = joined;
    return this;
  }

   /**
   * Get joined
   * @return joined
  **/
  @ApiModelProperty(value = "")
  public PlayerFullJoined getJoined() {
    return joined;
  }

  public void setJoined(PlayerFullJoined joined) {
    this.joined = joined;
  }

  public PlayerFull health(PlayerFullHealth health) {
    this.health = health;
    return this;
  }

   /**
   * Get health
   * @return health
  **/
  @ApiModelProperty(value = "")
  public PlayerFullHealth getHealth() {
    return health;
  }

  public void setHealth(PlayerFullHealth health) {
    this.health = health;
  }

  public PlayerFull food(PlayerFullFood food) {
    this.food = food;
    return this;
  }

   /**
   * Get food
   * @return food
  **/
  @ApiModelProperty(value = "")
  public PlayerFullFood getFood() {
    return food;
  }

  public void setFood(PlayerFullFood food) {
    this.food = food;
  }

  public PlayerFull statistics(Object statistics) {
    this.statistics = statistics;
    return this;
  }

   /**
   * A map from statistics id to value, keeping track of the players actions.
   * @return statistics
  **/
  @ApiModelProperty(value = "A map from statistics id to value, keeping track of the players actions.")
  public Object getStatistics() {
    return statistics;
  }

  public void setStatistics(Object statistics) {
    this.statistics = statistics;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerFull playerFull = (PlayerFull) o;
    return Objects.equals(this.type, playerFull.type) &&
        Objects.equals(this.uuid, playerFull.uuid) &&
        Objects.equals(this.online, playerFull.online) &&
        Objects.equals(this.location, playerFull.location) &&
        Objects.equals(this.name, playerFull.name) &&
        Objects.equals(this.link, playerFull.link) &&
        Objects.equals(this.propertyClass, playerFull.propertyClass) &&
        Objects.equals(this.velocity, playerFull.velocity) &&
        Objects.equals(this.rotation, playerFull.rotation) &&
        Objects.equals(this.scale, playerFull.scale) &&
        Objects.equals(this.inventory, playerFull.inventory) &&
        Objects.equals(this.connection, playerFull.connection) &&
        Objects.equals(this.armour, playerFull.armour) &&
        Objects.equals(this.achievements, playerFull.achievements) &&
        Objects.equals(this.experience, playerFull.experience) &&
        Objects.equals(this.gameMode, playerFull.gameMode) &&
        Objects.equals(this.joined, playerFull.joined) &&
        Objects.equals(this.health, playerFull.health) &&
        Objects.equals(this.food, playerFull.food) &&
        Objects.equals(this.statistics, playerFull.statistics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, uuid, online, location, name, link, propertyClass, velocity, rotation, scale, inventory, connection, armour, achievements, experience, gameMode, joined, health, food, statistics);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerFull {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    online: ").append(toIndentedString(online)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    velocity: ").append(toIndentedString(velocity)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    armour: ").append(toIndentedString(armour)).append("\n");
    sb.append("    achievements: ").append(toIndentedString(achievements)).append("\n");
    sb.append("    experience: ").append(toIndentedString(experience)).append("\n");
    sb.append("    gameMode: ").append(toIndentedString(gameMode)).append("\n");
    sb.append("    joined: ").append(toIndentedString(joined)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    food: ").append(toIndentedString(food)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

