/**
 * WebAPI
 * Access Sponge powered Minecraft servers through a WebAPI  #/ Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  #/ Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Inventory;
import io.swagger.client.model.Location;
import io.swagger.client.model.Player;
import io.swagger.client.model.Vector3;
import java.util.ArrayList;
import java.util.List;


/**
 * PlayerFull
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-09T12:59:04.867+02:00")
public class PlayerFull   {
  @SerializedName("velocity")
  private Vector3 velocity = null;

  @SerializedName("rotation")
  private Vector3 rotation = null;

  @SerializedName("scale")
  private Vector3 scale = null;

  @SerializedName("inventory")
  private Inventory inventory = null;

  @SerializedName("connection")
  private Object connection = null;

  @SerializedName("armour")
  private Object armour = null;

  @SerializedName("achievements")
  private List<Object> achievements = new ArrayList<Object>();

  @SerializedName("experience")
  private Object experience = null;

  @SerializedName("gameMode")
  private String gameMode = null;

  @SerializedName("joined")
  private Object joined = null;

  @SerializedName("health")
  private Object health = null;

  @SerializedName("food")
  private Object food = null;

  @SerializedName("statistics")
  private Object statistics = null;

  public PlayerFull velocity(Vector3 velocity) {
    this.velocity = velocity;
    return this;
  }

   /**
   * Get velocity
   * @return velocity
  **/
  @ApiModelProperty(example = "null", value = "")
  public Vector3 getVelocity() {
    return velocity;
  }

  public void setVelocity(Vector3 velocity) {
    this.velocity = velocity;
  }

  public PlayerFull rotation(Vector3 rotation) {
    this.rotation = rotation;
    return this;
  }

   /**
   * Get rotation
   * @return rotation
  **/
  @ApiModelProperty(example = "null", value = "")
  public Vector3 getRotation() {
    return rotation;
  }

  public void setRotation(Vector3 rotation) {
    this.rotation = rotation;
  }

  public PlayerFull scale(Vector3 scale) {
    this.scale = scale;
    return this;
  }

   /**
   * Get scale
   * @return scale
  **/
  @ApiModelProperty(example = "null", value = "")
  public Vector3 getScale() {
    return scale;
  }

  public void setScale(Vector3 scale) {
    this.scale = scale;
  }

  public PlayerFull inventory(Inventory inventory) {
    this.inventory = inventory;
    return this;
  }

   /**
   * Get inventory
   * @return inventory
  **/
  @ApiModelProperty(example = "null", value = "")
  public Inventory getInventory() {
    return inventory;
  }

  public void setInventory(Inventory inventory) {
    this.inventory = inventory;
  }

  public PlayerFull connection(Object connection) {
    this.connection = connection;
    return this;
  }

   /**
   * Get connection
   * @return connection
  **/
  @ApiModelProperty(example = "null", value = "")
  public Object getConnection() {
    return connection;
  }

  public void setConnection(Object connection) {
    this.connection = connection;
  }

  public PlayerFull armour(Object armour) {
    this.armour = armour;
    return this;
  }

   /**
   * Get armour
   * @return armour
  **/
  @ApiModelProperty(example = "null", value = "")
  public Object getArmour() {
    return armour;
  }

  public void setArmour(Object armour) {
    this.armour = armour;
  }

  public PlayerFull achievements(List<Object> achievements) {
    this.achievements = achievements;
    return this;
  }

  public PlayerFull addAchievementsItem(Object achievementsItem) {
    this.achievements.add(achievementsItem);
    return this;
  }

   /**
   * An array of achievements the player has been awarded.
   * @return achievements
  **/
  @ApiModelProperty(example = "null", value = "An array of achievements the player has been awarded.")
  public List<Object> getAchievements() {
    return achievements;
  }

  public void setAchievements(List<Object> achievements) {
    this.achievements = achievements;
  }

  public PlayerFull experience(Object experience) {
    this.experience = experience;
    return this;
  }

   /**
   * Get experience
   * @return experience
  **/
  @ApiModelProperty(example = "null", value = "")
  public Object getExperience() {
    return experience;
  }

  public void setExperience(Object experience) {
    this.experience = experience;
  }

  public PlayerFull gameMode(String gameMode) {
    this.gameMode = gameMode;
    return this;
  }

   /**
   * The current game mode the player is in.
   * @return gameMode
  **/
  @ApiModelProperty(example = "null", value = "The current game mode the player is in.")
  public String getGameMode() {
    return gameMode;
  }

  public void setGameMode(String gameMode) {
    this.gameMode = gameMode;
  }

  public PlayerFull joined(Object joined) {
    this.joined = joined;
    return this;
  }

   /**
   * Get joined
   * @return joined
  **/
  @ApiModelProperty(example = "null", value = "")
  public Object getJoined() {
    return joined;
  }

  public void setJoined(Object joined) {
    this.joined = joined;
  }

  public PlayerFull health(Object health) {
    this.health = health;
    return this;
  }

   /**
   * Get health
   * @return health
  **/
  @ApiModelProperty(example = "null", value = "")
  public Object getHealth() {
    return health;
  }

  public void setHealth(Object health) {
    this.health = health;
  }

  public PlayerFull food(Object food) {
    this.food = food;
    return this;
  }

   /**
   * Get food
   * @return food
  **/
  @ApiModelProperty(example = "null", value = "")
  public Object getFood() {
    return food;
  }

  public void setFood(Object food) {
    this.food = food;
  }

  public PlayerFull statistics(Object statistics) {
    this.statistics = statistics;
    return this;
  }

   /**
   * A map from statistics id to value, keeping track of the players actions.
   * @return statistics
  **/
  @ApiModelProperty(example = "null", value = "A map from statistics id to value, keeping track of the players actions.")
  public Object getStatistics() {
    return statistics;
  }

  public void setStatistics(Object statistics) {
    this.statistics = statistics;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerFull playerFull = (PlayerFull) o;
    return Objects.equals(this.velocity, playerFull.velocity) &&
        Objects.equals(this.rotation, playerFull.rotation) &&
        Objects.equals(this.scale, playerFull.scale) &&
        Objects.equals(this.inventory, playerFull.inventory) &&
        Objects.equals(this.connection, playerFull.connection) &&
        Objects.equals(this.armour, playerFull.armour) &&
        Objects.equals(this.achievements, playerFull.achievements) &&
        Objects.equals(this.experience, playerFull.experience) &&
        Objects.equals(this.gameMode, playerFull.gameMode) &&
        Objects.equals(this.joined, playerFull.joined) &&
        Objects.equals(this.health, playerFull.health) &&
        Objects.equals(this.food, playerFull.food) &&
        Objects.equals(this.statistics, playerFull.statistics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(velocity, rotation, scale, inventory, connection, armour, achievements, experience, gameMode, joined, health, food, statistics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerFull {\n");
    
    sb.append("    velocity: ").append(toIndentedString(velocity)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    armour: ").append(toIndentedString(armour)).append("\n");
    sb.append("    achievements: ").append(toIndentedString(achievements)).append("\n");
    sb.append("    experience: ").append(toIndentedString(experience)).append("\n");
    sb.append("    gameMode: ").append(toIndentedString(gameMode)).append("\n");
    sb.append("    joined: ").append(toIndentedString(joined)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    food: ").append(toIndentedString(food)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

