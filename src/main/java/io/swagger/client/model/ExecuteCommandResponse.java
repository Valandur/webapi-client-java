/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ExecuteCommandResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-13T12:26:34.036+02:00")
public class ExecuteCommandResponse {
  @SerializedName("cmd")
  private String cmd = null;

  @SerializedName("ok")
  private Boolean ok = null;

  @SerializedName("error")
  private String error = null;

  @SerializedName("response")
  private List<String> response = null;

  public ExecuteCommandResponse cmd(String cmd) {
    this.cmd = cmd;
    return this;
  }

   /**
   * The command that was executed
   * @return cmd
  **/
  @ApiModelProperty(required = true, value = "The command that was executed")
  public String getCmd() {
    return cmd;
  }

  public void setCmd(String cmd) {
    this.cmd = cmd;
  }

  public ExecuteCommandResponse ok(Boolean ok) {
    this.ok = ok;
    return this;
  }

   /**
   * True if this command executed successfully, false otherwise
   * @return ok
  **/
  @ApiModelProperty(required = true, value = "True if this command executed successfully, false otherwise")
  public Boolean isOk() {
    return ok;
  }

  public void setOk(Boolean ok) {
    this.ok = ok;
  }

  public ExecuteCommandResponse error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Any potential error that occured during execution
   * @return error
  **/
  @ApiModelProperty(value = "Any potential error that occured during execution")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }

  public ExecuteCommandResponse response(List<String> response) {
    this.response = response;
    return this;
  }

  public ExecuteCommandResponse addResponseItem(String responseItem) {
    if (this.response == null) {
      this.response = new ArrayList<String>();
    }
    this.response.add(responseItem);
    return this;
  }

   /**
   * The response chat lines that were sent when executing the command
   * @return response
  **/
  @ApiModelProperty(value = "The response chat lines that were sent when executing the command")
  public List<String> getResponse() {
    return response;
  }

  public void setResponse(List<String> response) {
    this.response = response;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecuteCommandResponse executeCommandResponse = (ExecuteCommandResponse) o;
    return Objects.equals(this.cmd, executeCommandResponse.cmd) &&
        Objects.equals(this.ok, executeCommandResponse.ok) &&
        Objects.equals(this.error, executeCommandResponse.error) &&
        Objects.equals(this.response, executeCommandResponse.response);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cmd, ok, error, response);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecuteCommandResponse {\n");
    
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    ok: ").append(toIndentedString(ok)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

