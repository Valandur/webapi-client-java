/*
 * Web-API
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.DamageRequest;
import io.swagger.client.model.SlotRequest;
import io.swagger.client.model.Vector3d;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * UpdatePlayerRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-13T12:26:34.036+02:00")
public class UpdatePlayerRequest {
  @SerializedName("damage")
  private DamageRequest damage = null;

  @SerializedName("exhaustion")
  private Double exhaustion = null;

  @SerializedName("experienceSinceLevel")
  private Integer experienceSinceLevel = null;

  @SerializedName("foodLevel")
  private Integer foodLevel = null;

  @SerializedName("gameMode")
  private String gameMode = null;

  @SerializedName("health")
  private Double health = null;

  @SerializedName("inventory")
  private List<SlotRequest> inventory = null;

  @SerializedName("level")
  private Integer level = null;

  @SerializedName("maxHealth")
  private Double maxHealth = null;

  @SerializedName("position")
  private Vector3d position = null;

  @SerializedName("rotation")
  private Vector3d rotation = null;

  @SerializedName("saturation")
  private Double saturation = null;

  @SerializedName("scale")
  private Vector3d scale = null;

  @SerializedName("totalExperience")
  private Integer totalExperience = null;

  @SerializedName("velocity")
  private Vector3d velocity = null;

  @SerializedName("world")
  private String world = null;

  public UpdatePlayerRequest damage(DamageRequest damage) {
    this.damage = damage;
    return this;
  }

   /**
   * The damage the entity will take
   * @return damage
  **/
  @ApiModelProperty(value = "The damage the entity will take")
  public DamageRequest getDamage() {
    return damage;
  }

  public void setDamage(DamageRequest damage) {
    this.damage = damage;
  }

  public UpdatePlayerRequest exhaustion(Double exhaustion) {
    this.exhaustion = exhaustion;
    return this;
  }

   /**
   * The exhaustion of the player
   * @return exhaustion
  **/
  @ApiModelProperty(value = "The exhaustion of the player")
  public Double getExhaustion() {
    return exhaustion;
  }

  public void setExhaustion(Double exhaustion) {
    this.exhaustion = exhaustion;
  }

  public UpdatePlayerRequest experienceSinceLevel(Integer experienceSinceLevel) {
    this.experienceSinceLevel = experienceSinceLevel;
    return this;
  }

   /**
   * The amount of experience gained since the last level
   * @return experienceSinceLevel
  **/
  @ApiModelProperty(value = "The amount of experience gained since the last level")
  public Integer getExperienceSinceLevel() {
    return experienceSinceLevel;
  }

  public void setExperienceSinceLevel(Integer experienceSinceLevel) {
    this.experienceSinceLevel = experienceSinceLevel;
  }

  public UpdatePlayerRequest foodLevel(Integer foodLevel) {
    this.foodLevel = foodLevel;
    return this;
  }

   /**
   * The food level of the player
   * @return foodLevel
  **/
  @ApiModelProperty(value = "The food level of the player")
  public Integer getFoodLevel() {
    return foodLevel;
  }

  public void setFoodLevel(Integer foodLevel) {
    this.foodLevel = foodLevel;
  }

  public UpdatePlayerRequest gameMode(String gameMode) {
    this.gameMode = gameMode;
    return this;
  }

   /**
   * The game mode of the player
   * @return gameMode
  **/
  @ApiModelProperty(value = "The game mode of the player")
  public String getGameMode() {
    return gameMode;
  }

  public void setGameMode(String gameMode) {
    this.gameMode = gameMode;
  }

  public UpdatePlayerRequest health(Double health) {
    this.health = health;
    return this;
  }

   /**
   * The current amount of health the player has
   * @return health
  **/
  @ApiModelProperty(value = "The current amount of health the player has")
  public Double getHealth() {
    return health;
  }

  public void setHealth(Double health) {
    this.health = health;
  }

  public UpdatePlayerRequest inventory(List<SlotRequest> inventory) {
    this.inventory = inventory;
    return this;
  }

  public UpdatePlayerRequest addInventoryItem(SlotRequest inventoryItem) {
    if (this.inventory == null) {
      this.inventory = new ArrayList<SlotRequest>();
    }
    this.inventory.add(inventoryItem);
    return this;
  }

   /**
   * The slots in the inventory of the entity to modify
   * @return inventory
  **/
  @ApiModelProperty(value = "The slots in the inventory of the entity to modify")
  public List<SlotRequest> getInventory() {
    return inventory;
  }

  public void setInventory(List<SlotRequest> inventory) {
    this.inventory = inventory;
  }

  public UpdatePlayerRequest level(Integer level) {
    this.level = level;
    return this;
  }

   /**
   * The player level
   * @return level
  **/
  @ApiModelProperty(value = "The player level")
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }

  public UpdatePlayerRequest maxHealth(Double maxHealth) {
    this.maxHealth = maxHealth;
    return this;
  }

   /**
   * The maximum health of the player
   * @return maxHealth
  **/
  @ApiModelProperty(value = "The maximum health of the player")
  public Double getMaxHealth() {
    return maxHealth;
  }

  public void setMaxHealth(Double maxHealth) {
    this.maxHealth = maxHealth;
  }

  public UpdatePlayerRequest position(Vector3d position) {
    this.position = position;
    return this;
  }

   /**
   * The position that the entity will be moved to
   * @return position
  **/
  @ApiModelProperty(value = "The position that the entity will be moved to")
  public Vector3d getPosition() {
    return position;
  }

  public void setPosition(Vector3d position) {
    this.position = position;
  }

  public UpdatePlayerRequest rotation(Vector3d rotation) {
    this.rotation = rotation;
    return this;
  }

   /**
   * The new rotation of the entity
   * @return rotation
  **/
  @ApiModelProperty(value = "The new rotation of the entity")
  public Vector3d getRotation() {
    return rotation;
  }

  public void setRotation(Vector3d rotation) {
    this.rotation = rotation;
  }

  public UpdatePlayerRequest saturation(Double saturation) {
    this.saturation = saturation;
    return this;
  }

   /**
   * The saturation of the player
   * @return saturation
  **/
  @ApiModelProperty(value = "The saturation of the player")
  public Double getSaturation() {
    return saturation;
  }

  public void setSaturation(Double saturation) {
    this.saturation = saturation;
  }

  public UpdatePlayerRequest scale(Vector3d scale) {
    this.scale = scale;
    return this;
  }

   /**
   * The new scale of the entity
   * @return scale
  **/
  @ApiModelProperty(value = "The new scale of the entity")
  public Vector3d getScale() {
    return scale;
  }

  public void setScale(Vector3d scale) {
    this.scale = scale;
  }

  public UpdatePlayerRequest totalExperience(Integer totalExperience) {
    this.totalExperience = totalExperience;
    return this;
  }

   /**
   * The total experience of the player
   * @return totalExperience
  **/
  @ApiModelProperty(value = "The total experience of the player")
  public Integer getTotalExperience() {
    return totalExperience;
  }

  public void setTotalExperience(Integer totalExperience) {
    this.totalExperience = totalExperience;
  }

  public UpdatePlayerRequest velocity(Vector3d velocity) {
    this.velocity = velocity;
    return this;
  }

   /**
   * The new speed of the entity
   * @return velocity
  **/
  @ApiModelProperty(value = "The new speed of the entity")
  public Vector3d getVelocity() {
    return velocity;
  }

  public void setVelocity(Vector3d velocity) {
    this.velocity = velocity;
  }

  public UpdatePlayerRequest world(String world) {
    this.world = world;
    return this;
  }

   /**
   * The world that the entity will be moved to
   * @return world
  **/
  @ApiModelProperty(value = "The world that the entity will be moved to")
  public String getWorld() {
    return world;
  }

  public void setWorld(String world) {
    this.world = world;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePlayerRequest updatePlayerRequest = (UpdatePlayerRequest) o;
    return Objects.equals(this.damage, updatePlayerRequest.damage) &&
        Objects.equals(this.exhaustion, updatePlayerRequest.exhaustion) &&
        Objects.equals(this.experienceSinceLevel, updatePlayerRequest.experienceSinceLevel) &&
        Objects.equals(this.foodLevel, updatePlayerRequest.foodLevel) &&
        Objects.equals(this.gameMode, updatePlayerRequest.gameMode) &&
        Objects.equals(this.health, updatePlayerRequest.health) &&
        Objects.equals(this.inventory, updatePlayerRequest.inventory) &&
        Objects.equals(this.level, updatePlayerRequest.level) &&
        Objects.equals(this.maxHealth, updatePlayerRequest.maxHealth) &&
        Objects.equals(this.position, updatePlayerRequest.position) &&
        Objects.equals(this.rotation, updatePlayerRequest.rotation) &&
        Objects.equals(this.saturation, updatePlayerRequest.saturation) &&
        Objects.equals(this.scale, updatePlayerRequest.scale) &&
        Objects.equals(this.totalExperience, updatePlayerRequest.totalExperience) &&
        Objects.equals(this.velocity, updatePlayerRequest.velocity) &&
        Objects.equals(this.world, updatePlayerRequest.world);
  }

  @Override
  public int hashCode() {
    return Objects.hash(damage, exhaustion, experienceSinceLevel, foodLevel, gameMode, health, inventory, level, maxHealth, position, rotation, saturation, scale, totalExperience, velocity, world);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePlayerRequest {\n");
    
    sb.append("    damage: ").append(toIndentedString(damage)).append("\n");
    sb.append("    exhaustion: ").append(toIndentedString(exhaustion)).append("\n");
    sb.append("    experienceSinceLevel: ").append(toIndentedString(experienceSinceLevel)).append("\n");
    sb.append("    foodLevel: ").append(toIndentedString(foodLevel)).append("\n");
    sb.append("    gameMode: ").append(toIndentedString(gameMode)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    maxHealth: ").append(toIndentedString(maxHealth)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("    saturation: ").append(toIndentedString(saturation)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    totalExperience: ").append(toIndentedString(totalExperience)).append("\n");
    sb.append("    velocity: ").append(toIndentedString(velocity)).append("\n");
    sb.append("    world: ").append(toIndentedString(world)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

